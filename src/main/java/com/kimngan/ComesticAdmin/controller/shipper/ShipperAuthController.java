package com.kimngan.ComesticAdmin.controller.shipper;

import java.io.IOException;
import java.security.Principal;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.StorageService;

@Controller
@RequestMapping("/shipper")
public class ShipperAuthController {

	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private DonHangService donHangService;

	@Autowired
	private StorageService storageService;

	@ModelAttribute("user")
	public NguoiDung getCurrentUser(Principal principal) {
		if (principal != null) {
			return nguoiDungService.findByTenNguoiDung(principal.getName());
		}
		return null;
	}

	// Hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p
	@GetMapping("/login")
	public String showLoginForm() {
		return "shipper/login"; // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang login.html c·ªßa Shipper
	}

	// ƒêƒÉng xu·∫•t Shipper
	@GetMapping("/logout")
	public String logout() {
		return "redirect:/shipper/login"; // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p sau khi ƒëƒÉng xu·∫•t
	}

	// Th√™m th√¥ng tin Shipper hi·ªán t·∫°i v√†o model (gi·ªëng c√°ch l√†m c·ªßa Customer)
	@ModelAttribute("currentShipper")
	public NguoiDung getCurrentShipper(Principal principal) {
		if (principal != null) {
			return nguoiDungService.findByTenNguoiDung(principal.getName());
		}
		return null;
	}

	// Trang ch√≠nh c·ªßa shipper, hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n + danh s√°ch ƒë∆°n h√†ng
	@GetMapping({ "", "/", "/index" })
	public String shipperIndex(Model model, Principal principal) {
		System.out.println("üî•üî•üî• Controller ShipperController ƒë√£ ƒë∆∞·ª£c g·ªçi!");

		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		System.out.println("üöÄ Username ƒëang ƒëƒÉng nh·∫≠p: " + username);

		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y shipper!");
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/index";
		}

		System.out.println("‚úÖ Shipper ID: " + currentShipper.getMaNguoiDung());

		List<DonHang> danhSachDonHang = donHangService.findOrdersByShipper(currentShipper);
		System.out.println("üì¶ S·ªë ƒë∆°n h√†ng t√¨m th·∫•y: " + (danhSachDonHang != null ? danhSachDonHang.size() : "NULL"));

		model.addAttribute("danhSachDonHang", danhSachDonHang);
		model.addAttribute("shipper", currentShipper);

		return "shipper/index";
	}

	@GetMapping("/orders")
	public String listAllOrders(Model model, Principal principal) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/donhang/index";
		}

		// Ch·ªâ l·∫•y ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ duy·ªát" ho·∫∑c "ƒêang giao"
		List<DonHang> danhSachDonHang = donHangService.findOrdersByShipper(currentShipper);

		model.addAttribute("danhSachDonHang", danhSachDonHang);
		model.addAttribute("shipper", currentShipper);

		return "shipper/donhang/index";
	}

	@GetMapping("/order/{id}")
	public String orderDetail(@PathVariable("id") Integer id, Model model, Principal principal) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/donhang/index";
		}

		DonHang order = donHangService.getDonHangById(id);
		if (order == null) {
			return "redirect:/shipper/orders";
		}

		model.addAttribute("order", order);
		model.addAttribute("shipper", currentShipper); // ‚úÖ Th√™m shipper v√†o model gi·ªëng listAllOrders

		return "shipper/donhang/detail";
	}

	@PostMapping("/order/update-status")
	public String updateOrderStatus(@RequestParam("orderId") Integer orderId,
	                                @RequestParam("status") String status,
	                                @RequestParam(value = "hinhAnh", required = false) MultipartFile hinhAnh,
	                                Principal principal,
	                                RedirectAttributes redirectAttributes) {
	    if (principal == null) {
	        return "redirect:/shipper/login";
	    }

	    DonHang order = donHangService.getDonHangById(orderId);
	    if (order == null) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
	        return "redirect:/shipper/orders";
	    }

	    // ‚úÖ Ki·ªÉm tra n·∫øu shipper ƒëang ƒëƒÉng nh·∫≠p c√≥ ph·∫£i l√† shipper c·ªßa ƒë∆°n h√†ng kh√¥ng
	    if (order.getShipper() == null || !order.getShipper().getTenNguoiDung().equals(principal.getName())) {
	        redirectAttributes.addFlashAttribute("errorMessage", "B·∫°n kh√¥ng ph·∫£i shipper c·ªßa ƒë∆°n h√†ng n√†y.");
	        return "redirect:/shipper/orders";
	    }

	    // ‚úÖ Ch·ªâ cho ph√©p shipper c·∫≠p nh·∫≠t "ƒêang giao h√†ng", "ƒê√£ giao h√†ng", "Giao th·∫•t b·∫°i"
	  //  List<String> allowedStatuses = Arrays.asList("ƒêang giao h√†ng", "ƒê√£ ho√†n th√†nh", "ƒê√£ h·ªßy");
	    List<String> allowedStatuses = Arrays.asList("ƒêang giao h√†ng","ƒê√£ ho√†n th√†nh", "Giao th·∫•t b·∫°i");

	    if (!allowedStatuses.contains(status)) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
	        return "redirect:/shipper/orders";
	    }

	    // ‚úÖ L∆∞u tr·∫°ng th√°i v√†o "trangThaiChoXacNhan" ƒë·ªÉ admin x√°c nh·∫≠n
	    order.setTrangThaiChoXacNhan(status);

	    // ‚úÖ N·∫øu c√≥ ·∫£nh, l∆∞u ·∫£nh
	    if (hinhAnh != null && !hinhAnh.isEmpty()) {
	        try {
	            String fileName = storageService.storeFile(hinhAnh);
	            order.setHinhAnhGiaoHang(fileName);
	        } catch (IOException e) {
	            e.printStackTrace();
	            redirectAttributes.addFlashAttribute("errorMessage", "L·ªói khi l∆∞u ·∫£nh.");
	            return "redirect:/shipper/order/" + orderId;
	        }
	    }

	    donHangService.updateDonHang(order);

	    redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng. Ch·ªù admin x√°c nh·∫≠n.");
	    return "redirect:/shipper/order/" + orderId;
	}



}
