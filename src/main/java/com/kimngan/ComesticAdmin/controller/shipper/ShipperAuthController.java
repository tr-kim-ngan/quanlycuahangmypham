package com.kimngan.ComesticAdmin.controller.shipper;

import java.io.IOException;
import java.security.Principal;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.StorageService;

@Controller
@RequestMapping("/shipper")
public class ShipperAuthController {

	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private DonHangService donHangService;

	@Autowired
	private StorageService storageService;

	@ModelAttribute("user")
	public NguoiDung getCurrentUser(Principal principal) {
		if (principal != null) {
			return nguoiDungService.findByTenNguoiDung(principal.getName());
		}
		return null;
	}

	// Hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p
	@GetMapping("/login")
	public String showLoginForm() {
		return "shipper/login"; // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang login.html c·ªßa Shipper
	}

	// ƒêƒÉng xu·∫•t Shipper
	@GetMapping("/logout")
	public String logout() {
		return "redirect:/shipper/login"; // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p sau khi ƒëƒÉng xu·∫•t
	}

	// Th√™m th√¥ng tin Shipper hi·ªán t·∫°i v√†o model (gi·ªëng c√°ch l√†m c·ªßa Customer)
	@ModelAttribute("currentShipper")
	public NguoiDung getCurrentShipper(Principal principal) {
		if (principal != null) {
			return nguoiDungService.findByTenNguoiDung(principal.getName());
		}
		return null;
	}

	// Trang ch√≠nh c·ªßa shipper, hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n + danh s√°ch ƒë∆°n h√†ng
	@GetMapping({ "", "/", "/index" })
	public String shipperIndex(Model model, Principal principal) {
		System.out.println(" Controller ShipperController ƒë√£ ƒë∆∞·ª£c g·ªçi!");

		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		System.out.println(" Username ƒëang ƒëƒÉng nh·∫≠p: " + username);

		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			System.out.println(" Kh√¥ng t√¨m th·∫•y shipper!");
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/index";
		}

		System.out.println(" Shipper ID: " + currentShipper.getMaNguoiDung());

		List<DonHang> danhSachDonHang = donHangService.findOrdersByShipper(currentShipper);
		System.out.println(" S·ªë ƒë∆°n h√†ng t√¨m th·∫•y: " + (danhSachDonHang != null ? danhSachDonHang.size() : "NULL"));

		model.addAttribute("danhSachDonHang", danhSachDonHang);
		model.addAttribute("shipper", currentShipper);

		return "shipper/index";
	}

	@GetMapping("/orders")
	public String listAllOrders(@RequestParam(value = "status", required = false) String status, Model model,
			Principal principal) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/donhang/index";
		}

		// Ch·ªâ l·∫•y ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "ƒê√£ duy·ªát" ho·∫∑c "ƒêang giao"
		List<DonHang> danhSachDonHang = donHangService.findOrdersByShipper(currentShipper);

		model.addAttribute("danhSachDonHang", danhSachDonHang);
		model.addAttribute("shipper", currentShipper);

		model.addAttribute("selectedStatus", status);

		return "shipper/donhang/index";
	}

	@GetMapping("/order/{id}")
	public String orderDetail(@PathVariable("id") Integer id, Model model, Principal principal) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}

		String username = principal.getName();
		NguoiDung currentShipper = nguoiDungService.findByTenNguoiDung(username);

		if (currentShipper == null) {
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n shipper!");
			return "shipper/donhang/index";
		}

		DonHang order = donHangService.getDonHangById(id);
		if (order == null) {
			return "redirect:/shipper/orders";
		}

		model.addAttribute("order", order);
		model.addAttribute("shipper", currentShipper); // Th√™m shipper v√†o model gi·ªëng listAllOrders

		return "shipper/donhang/detail";
	}

//	@PostMapping("/order/update-status")
//	public String updateOrderStatus(@RequestParam("orderId") Integer orderId, @RequestParam("status") String status,
//			@RequestParam(value = "hinhAnh", required = false) MultipartFile hinhAnh,
//			@RequestParam(value = "lyDo", required = false) String lyDo, Principal principal,
//			RedirectAttributes redirectAttributes) {
//
//		if (principal == null) {
//			return "redirect:/shipper/login";
//		}
//
//		DonHang order = donHangService.getDonHangById(orderId);
//
//		if (order == null) {
//			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//			return "redirect:/shipper/orders";
//		}
//		if ("ƒêang chu·∫©n b·ªã h√†ng".equals(order.getTrangThaiDonHang())) {
//			order.setTrangThaiChoXacNhan("ƒêang giao h√†ng"); // L∆∞u v√†o tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
//			donHangService.updateDonHang(order);
//			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ g·ª≠i y√™u c·∫ßu x√°c nh·∫≠n ƒëang giao h√†ng.");
//			return "redirect:/shipper/order/" + orderId;
//		}
//
//		if (("ƒê√£ x√°c nh·∫≠n".equals(order.getTrangThaiDonHang())
//				|| "ƒêang chu·∫©n b·ªã h√†ng".equals(order.getTrangThaiDonHang()))
//				&& "Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)".equals(order.getTrangThaiChoXacNhan())
//				&& "ƒêang giao l·∫°i (L·∫ßn 2)".equals(status)) {
//
//			order.setTrangThaiDonHang("ƒêang giao h√†ng");
//			donHangService.updateDonHang(order);
//			redirectAttributes.addFlashAttribute("successMessage", "B·∫°n ƒë√£ nh·∫≠n h√†ng l·∫ßn 2! B·∫Øt ƒë·∫ßu giao l·∫°i.");
//			return "redirect:/shipper/order/" + orderId;
//		}
//		if (status.equals("ƒê√£ ho√†n th√†nh") && hinhAnh != null && !hinhAnh.isEmpty()) {
//			try {
//				String fileName = storageService.storeFile(hinhAnh);
//				order.setHinhAnhGiaoHang(fileName); // C√≥ ch·∫Øc ch·ªó n√†y ƒë√£ ch·∫°y kh√¥ng?
//				System.out.println("üì∑ ·∫¢nh ƒë√£ l∆∞u: " + fileName);
//			} catch (IOException e) {
//				e.printStackTrace();
//				redirectAttributes.addFlashAttribute("errorMessage", "L·ªói khi l∆∞u ·∫£nh.");
//				return "redirect:/shipper/order/" + orderId;
//			}
//		}
//
//		// Ki·ªÉm tra n·∫øu shipper ƒëang ƒëƒÉng nh·∫≠p c√≥ ph·∫£i l√† shipper c·ªßa ƒë∆°n h√†ng kh√¥ng
//		if (order.getShipper() == null || !order.getShipper().getTenNguoiDung().equals(principal.getName())) {
//			redirectAttributes.addFlashAttribute("errorMessage", "B·∫°n kh√¥ng ph·∫£i shipper c·ªßa ƒë∆°n h√†ng n√†y.");
//			return "redirect:/shipper/orders";
//		}
//
//		// N·∫øu shipper nh·∫≠n ƒë∆°n giao l·∫°i (Admin ƒë√£ ch·ªçn giao l·∫°i)
//		if ("Ch·ªù shipper x√°c nh·∫≠n l·∫°i".equals(order.getTrangThaiChoXacNhan())) {
//			order.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // Quay v·ªÅ tr·∫°ng th√°i chu·∫©n b·ªã h√†ng
//			order.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
//			donHangService.updateDonHang(order);
//			redirectAttributes.addFlashAttribute("successMessage", "B·∫°n ƒë√£ nh·∫≠n ƒë∆°n h√†ng ƒë·ªÉ giao l·∫°i.");
//			return "redirect:/shipper/order/" + orderId;
//		}
//		// Ch·ªâ cho ph√©p shipper c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p l·ªá
//		List<String> allowedStatuses = Arrays.asList("ƒêang giao h√†ng", "ƒê√£ ho√†n th√†nh", "Giao th·∫•t b·∫°i");
//
//		if (!allowedStatuses.contains(status)) {
//			redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
//			return "redirect:/shipper/orders";
//		}
//
//		// N·∫øu tr·∫°ng th√°i l√† "Giao th·∫•t b·∫°i", ki·ªÉm tra s·ªë l·∫ßn giao th·∫•t b·∫°i
//		if (status.equals("Giao th·∫•t b·∫°i")) {
//			int soLanGiaoThatBai = order.getSoLanGiaoThatBai(); // C·∫ßn c√≥ tr∆∞·ªùng n√†y trong DonHang
//
//			if (soLanGiaoThatBai >= 2) {
//				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn, kh√¥ng th·ªÉ giao l·∫°i.");
//				return "redirect:/shipper/orders";
//			}
//
//			// C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i theo s·ªë l·∫ßn giao
//			if (soLanGiaoThatBai == 0) {
//				order.setTrangThaiChoXacNhan("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)");
//			} else if (soLanGiaoThatBai == 1) {
//				order.setTrangThaiChoXacNhan("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)");
//			}
//
//			// L∆∞u c·∫£ l·ªãch s·ª≠ l√Ω do th·∫•t b·∫°i m√† kh√¥ng ghi ƒë√®
//			// ƒê·∫£m b·∫£o l∆∞u c·∫£ l·ªãch s·ª≠ l√Ω do th·∫•t b·∫°i m√† kh√¥ng b·ªã l·ªói
//			if (lyDo != null && !lyDo.trim().isEmpty()) {
//				String ghiChuCu = order.getGhiChu() == null ? "" : order.getGhiChu();
//				order.setGhiChu(ghiChuCu + "  L·∫ßn " + (soLanGiaoThatBai + 1) + ": " + lyDo.trim());
//			} else {
//				String ghiChuCu = order.getGhiChu() == null ? "" : order.getGhiChu() + "\n";
//				order.setGhiChu(ghiChuCu + "  L·∫ßn " + (soLanGiaoThatBai + 1) + ": Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p.");
//			}
//
//			// C·∫≠p nh·∫≠t s·ªë l·∫ßn giao th·∫•t b·∫°i
//			order.setSoLanGiaoThatBai(soLanGiaoThatBai + 1);
//
//			donHangService.updateDonHang(order);
//
//			System.out.println(" Ghi ch√∫ sau khi shipper nh·∫≠p: " + order.getGhiChu());
//
//			redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i. Ch·ªù admin x√°c nh·∫≠n.");
//			return "redirect:/shipper/order/" + orderId;
//		}
//
//		// N·∫øu tr·∫°ng th√°i l√† "ƒê√£ ho√†n th√†nh", l∆∞u ·∫£nh giao h√†ng
//
//		System.out.println(" Nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i:");
//		System.out.println("üîπ Order ID: " + orderId);
//		System.out.println("üîπ Tr·∫°ng th√°i m·ªõi: " + status);
//		System.out.println("üîπ L√Ω do th·∫•t b·∫°i (lyDo): " + lyDo);
//		System.out.println("üîπ H√¨nh ·∫£nh: " + (hinhAnh != null ? hinhAnh.getOriginalFilename() : "Kh√¥ng c√≥ h√¨nh"));
//
//		order.setTrangThaiChoXacNhan(status);
//		donHangService.updateDonHang(order);
//		System.out.println(" C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.");
//
//		redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng. Ch·ªù admin x√°c nh·∫≠n.");
//		return "redirect:/shipper/order/" + orderId;
//	}
	@PostMapping("/order/update-status")
	public String updateOrderStatus(@RequestParam("orderId") Integer orderId, @RequestParam("status") String status,
			@RequestParam(value = "hinhAnh", required = false) MultipartFile hinhAnh,
			@RequestParam(value = "lyDo", required = false) String lyDo, Principal principal,
			RedirectAttributes redirectAttributes) {

		if (principal == null)
			return "redirect:/shipper/login";

		DonHang order = donHangService.getDonHangById(orderId);
		if (order == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/shipper/orders";
		}

		// ‚úÖ Ki·ªÉm tra shipper c√≥ ph·∫£i l√† ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p kh√¥ng
		if (order.getShipper() == null || !order.getShipper().getTenNguoiDung().equals(principal.getName())) {
			redirectAttributes.addFlashAttribute("errorMessage", "B·∫°n kh√¥ng ph·∫£i shipper c·ªßa ƒë∆°n h√†ng n√†y.");
			return "redirect:/shipper/orders";
		}

		// ‚úÖ N·∫øu ƒë∆°n ƒëang ·ªü tr·∫°ng th√°i y√™u c·∫ßu shipper giao l·∫°i
		if ("Ch·ªù shipper x√°c nh·∫≠n l·∫°i".equals(order.getTrangThaiChoXacNhan())) {
			order.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
			order.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(order);
			redirectAttributes.addFlashAttribute("successMessage", "B·∫°n ƒë√£ nh·∫≠n ƒë∆°n h√†ng ƒë·ªÉ giao l·∫°i.");
			return "redirect:/shipper/order/" + orderId;
		}

		if ("Giao th·∫•t b·∫°i".equals(status)) {
			int lan = order.getSoLanGiaoThatBai();

			System.out.println("üì¶ Giao th·∫•t b·∫°i l·∫ßn: " + (lan + 1));

			if (lan >= 2) {
				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn.");
				return "redirect:/shipper/orders";
			}

			// Giao th·∫•t b·∫°i l·∫ßn 1 ‚Üí ch·ªù x√°c nh·∫≠n
//			if (lan == 0) {
//				order.setTrangThaiChoXacNhan("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)");
//				redirectAttributes.addFlashAttribute("successMessage",
//						"C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i. Ch·ªù x√°c nh·∫≠n t·ª´ kho.");
//			}
//			// Giao th·∫•t b·∫°i l·∫ßn 2 ‚Üí t·ª± ƒë·ªông h·ªßy ƒë∆°n lu√¥n
//			else if (lan == 1) {
//				order.setTrangThaiDonHang("ƒê√£ h·ªßy");
//				order.setTrangThaiChoXacNhan(null);
//				redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn v√† b·ªã h·ªßy.");
//			}
			if (lan == 0) {
				order.setTrangThaiChoXacNhan("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)");
			} else if (lan == 1) {
				order.setTrangThaiChoXacNhan("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)");
			}


			order.setSoLanGiaoThatBai(lan + 1);

			// Ghi ch√∫ l√Ω do
			String ghiChuCu = order.getGhiChu() == null ? "" : order.getGhiChu();
			String ghiChuMoi = "\n  L·∫ßn " + (lan + 1) + ": "
					+ (lyDo == null || lyDo.isBlank() ? "Kh√¥ng c√≥ l√Ω do." : lyDo.trim());
			order.setGhiChu(ghiChuCu + ghiChuMoi);

			donHangService.updateDonHang(order);
			return "redirect:/shipper/order/" + orderId;
		}

		// ‚úÖ N·∫øu tr·∫°ng th√°i l√† "ƒê√£ ho√†n th√†nh" ‚Üí c·∫ßn ·∫£nh v√† ch·ªù x√°c nh·∫≠n
		if ("ƒê√£ ho√†n th√†nh".equals(status)) {
			if (hinhAnh != null && !hinhAnh.isEmpty()) {
				try {
					String fileName = storageService.storeFile(hinhAnh);
					order.setHinhAnhGiaoHang(fileName);
				} catch (IOException e) {
					e.printStackTrace();
					redirectAttributes.addFlashAttribute("errorMessage", "L·ªói khi l∆∞u ·∫£nh.");
					return "redirect:/shipper/order/" + orderId;
				}
			}


			order.setTrangThaiDonHang("ƒê√£ ho√†n th√†nh");
			order.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(order);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ g·ª≠i x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng.");
			return "redirect:/shipper/order/" + orderId;
		}

		// ‚úÖ C√°c tr·∫°ng th√°i kh√°c ‚Üí c·∫≠p nh·∫≠t tr·ª±c ti·∫øp
		order.setTrangThaiDonHang(status);
		order.setTrangThaiChoXacNhan(null); // x√≥a tr·∫°ng th√°i ch·ªù n·∫øu c√≥
		donHangService.updateDonHang(order);

		redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.");
		return "redirect:/shipper/order/" + orderId;
	}

	@GetMapping("/account")
	public String showAccountPage(Model model, Principal principal) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}
		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		model.addAttribute("nguoiDung", currentUser);
		return "shipper/account"; // Giao di·ªán account c·ªßa shipper
	}

	@PostMapping("/account")
	public String updateAccount(@ModelAttribute("nguoiDung") NguoiDung updatedUser,
			@RequestParam("avatarFile") MultipartFile avatarFile, Principal principal,
			RedirectAttributes redirectAttributes) {
		if (principal == null) {
			return "redirect:/shipper/login";
		}

		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		if (currentUser == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
			return "redirect:/shipper/account";
		}

		currentUser.setHoTen(updatedUser.getHoTen());
		currentUser.setEmail(updatedUser.getEmail());
		currentUser.setSoDienThoai(updatedUser.getSoDienThoai());
		currentUser.setDiaChi(updatedUser.getDiaChi());

		if (avatarFile != null && !avatarFile.isEmpty()) {
			try {
				String fileName = storageService.storeFile(avatarFile);
				currentUser.setAvatar(fileName);
			} catch (IOException e) {
				redirectAttributes.addFlashAttribute("errorMessage", "L·ªói khi l∆∞u ·∫£nh ƒë·∫°i di·ªán.");
				return "redirect:/shipper/account";
			}
		}

		nguoiDungService.save(currentUser);
		redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
		return "redirect:/shipper/account";
	}

}
