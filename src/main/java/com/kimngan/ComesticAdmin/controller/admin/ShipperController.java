package com.kimngan.ComesticAdmin.controller.admin;

import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.entity.QuyenTruyCap;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.repository.QuyenTruyCapRepository;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

@Controller
@RequestMapping("/admin/shipper")
public class ShipperController {

	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private QuyenTruyCapRepository quyenTruyCapRepository;

	@Autowired
	private PasswordEncoder passwordEncoder;

	// üí° Th√™m th√¥ng tin user v√†o model ƒë·ªÉ tr√°nh l·ªói Thymeleaf
	@ModelAttribute
	public void addUserToModel(Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof NguoiDungDetails) {
			NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
			model.addAttribute("user", userDetails);
		}
	}

	// 1Ô∏è Xem danh s√°ch Shipper
	@GetMapping
	public String listShippers(Model model) {
		List<NguoiDung> shippers = nguoiDungService.findByRole("SHIPPER")
				  .stream()
	                .sorted(Comparator.comparingInt(NguoiDung::getMaNguoiDung).reversed()) // S·∫Øp x·∫øp gi·∫£m d·∫ßn
	                .collect(Collectors.toList());
				
		System.out.println("DEBUG - Shippers trong Controller: " + shippers); // Debug
		model.addAttribute("shippers", shippers);
		return "admin/shipper/index";
	}

	// 2Ô∏è Hi·ªÉn th·ªã form th√™m Shipper
	@GetMapping("/add")
	public String showAddForm(Model model) {
		model.addAttribute("nguoiDung", new NguoiDung());
		return "admin/shipper/add"; // Giao di·ªán th√™m shipper
	}

	// 3Ô∏è X·ª≠ l√Ω th√™m Shipper

	@PostMapping("/add")
	public String addShipper(@ModelAttribute("nguoiDung") NguoiDung nguoiDung, 
			RedirectAttributes redirectAttributes) {
		 // Ki·ªÉm tra n·∫øu t√™n ƒë√£ t·ªìn t·∫°i
	    if (nguoiDungService.existsByTenNguoiDung(nguoiDung.getTenNguoiDung())) {
	        redirectAttributes.addFlashAttribute("error", "T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/add";
	    }
	    // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i
	    if (nguoiDungService.existsByEmail(nguoiDung.getEmail())) {
	        redirectAttributes.addFlashAttribute("error", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/add";
	    }

	    // Ki·ªÉm tra n·∫øu s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i
	    if (nguoiDungService.existsBySoDienThoai(nguoiDung.getSoDienThoai())) {
	        redirectAttributes.addFlashAttribute("error", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/add";
	    }

	    // G√°n quy·ªÅn SHIPPER
	    QuyenTruyCap quyenShipper = quyenTruyCapRepository.findByTenQuyen("SHIPPER");
	    nguoiDung.setQuyenTruyCap(quyenShipper);

	    // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
	    nguoiDung.setMatKhau(passwordEncoder.encode(nguoiDung.getMatKhau()));

	    // L∆∞u v√†o DB
	    nguoiDungService.save(nguoiDung);
	    redirectAttributes.addFlashAttribute("success", "Th√™m shipper th√†nh c√¥ng!");

	    return "redirect:/admin/shipper";
	}


	// 4Ô∏è‚É£ Hi·ªÉn th·ªã form s·ª≠a Shipper
	@GetMapping("/edit/{id}")
	public String showEditForm(@PathVariable("id") Integer id, Model model) {
		NguoiDung shipper = nguoiDungService.findById(id);
		model.addAttribute("nguoiDung", shipper);
		return "admin/shipper/edit"; // Giao di·ªán s·ª≠a shipper
	}

	// 5Ô∏è‚É£ X·ª≠ l√Ω c·∫≠p nh·∫≠t Shipper
	@PostMapping("/edit")
	public String updateShipper(@ModelAttribute("nguoiDung") NguoiDung updatedShipper, RedirectAttributes redirectAttributes) {
	    // T√¨m Shipper hi·ªán t·∫°i trong database
	    NguoiDung existingShipper = nguoiDungService.findById(updatedShipper.getMaNguoiDung());

	    if (existingShipper == null) {
	        redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y shipper c·∫ßn c·∫≠p nh·∫≠t!");
	        return "redirect:/admin/shipper";
	    }
	    // Ki·ªÉm tra n·∫øu t√™n ƒë√£ t·ªìn t·∫°i ·ªü m·ªôt Shipper kh√°c
	    if (nguoiDungService.existsByTenNguoiDungAndNotId(updatedShipper.getTenNguoiDung(), updatedShipper.getMaNguoiDung())) {
	        redirectAttributes.addFlashAttribute("error", "T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/edit/" + updatedShipper.getMaNguoiDung();
	    }

	    // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i ·ªü m·ªôt Shipper kh√°c
	    if (nguoiDungService.existsByEmailAndNotId(updatedShipper.getEmail(), updatedShipper.getMaNguoiDung())) {
	        System.out.println("‚ùå L·ªói: Email ƒë√£ t·ªìn t·∫°i!");
	        redirectAttributes.addFlashAttribute("error", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/edit/" + updatedShipper.getMaNguoiDung();
	    }

	    // Ki·ªÉm tra n·∫øu s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ·ªü m·ªôt Shipper kh√°c
	    if (nguoiDungService.existsBySoDienThoaiAndNotId(updatedShipper.getSoDienThoai(), updatedShipper.getMaNguoiDung())) {
	        System.out.println("‚ùå L·ªói: S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
	        redirectAttributes.addFlashAttribute("error", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
	        return "redirect:/admin/shipper/edit/" + updatedShipper.getMaNguoiDung();
	    }

	    // C·∫≠p nh·∫≠t th√¥ng tin Shipper
	    existingShipper.setTenNguoiDung(updatedShipper.getTenNguoiDung());
	    existingShipper.setEmail(updatedShipper.getEmail());
	    existingShipper.setSoDienThoai(updatedShipper.getSoDienThoai());

	    // Ch·ªâ m√£ h√≥a m·∫≠t kh·∫©u n·∫øu admin nh·∫≠p m·∫≠t kh·∫©u m·ªõi
	    if (updatedShipper.getMatKhau() != null && !updatedShipper.getMatKhau().isEmpty()) {
	        existingShipper.setMatKhau(passwordEncoder.encode(updatedShipper.getMatKhau()));
	    }

	    // L∆∞u v√†o DB
	    nguoiDungService.save(existingShipper);
	    redirectAttributes.addFlashAttribute("success", "C·∫≠p nh·∫≠t shipper th√†nh c√¥ng!");

	    return "redirect:/admin/shipper/edit/" + updatedShipper.getMaNguoiDung();

	}



	// 4Ô∏è X√≥a ho·∫∑c v√¥ hi·ªáu h√≥a Shipper
	@GetMapping("/delete/{id}")
	public String deleteShipper(@PathVariable("id") Integer id) {
		nguoiDungService.deleteById(id);
		return "redirect:/admin/shipper";
	}
}
