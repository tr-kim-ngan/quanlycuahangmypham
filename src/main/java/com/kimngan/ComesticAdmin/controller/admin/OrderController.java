package com.kimngan.ComesticAdmin.controller.admin;

import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import jakarta.servlet.http.HttpServletRequest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import java.security.Principal;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/admin")
public class OrderController {

	@Autowired
	private DonHangService donHangService;

	@Autowired
	private NguoiDungService nguoiDungService;

	@GetMapping("/orders")
	public String getOrders(HttpServletRequest request, Model model,
			@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "size", defaultValue = "10") int size,
			@RequestParam(value = "status", required = false) String status) {

		page = Math.max(page, 0);
		PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "maDonHang"));
		Page<DonHang> donHangPage = (status != null && !status.equals("all"))
				? donHangService.getDonHangsByStatus(status, pageRequest)
				: donHangService.getAllDonHangs(pageRequest);

		Map<Integer, String> formattedTongGiaTriMap = formatOrderPrices(donHangPage);
		model.addAttribute("formattedTongGiaTriMap", formattedTongGiaTriMap);
		model.addAttribute("donHangs", donHangPage.getContent());
		model.addAttribute("currentPage", donHangPage.getNumber());
		model.addAttribute("totalPages", donHangPage.getTotalPages());
		model.addAttribute("size", size);
		model.addAttribute("selectedStatus", status);
		model.addAttribute("searchAction", "/admin/orders");
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		return "admin/order/index";
	}

	@GetMapping("/orders/{maDonHang}")
	public String viewOrder(@PathVariable("maDonHang") Integer maDonHang, Model model) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			return "redirect:/admin/orders";
		}

		// ‚úÖ N·∫øu tr·∫°ng th√°i c·∫ßn admin ch·ªçn l·∫°i shipper, lu√¥n l·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = new ArrayList<>();
		if ("Giao h√†ng th·∫•t b·∫°i".equals(donHang.getTrangThaiChoXacNhan())
				|| "ƒê√£ x√°c nh·∫≠n".equals(donHang.getTrangThaiDonHang())) {
			danhSachShipper = nguoiDungService.findByRole("SHIPPER");
		}

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);

		Integer soLanGiaoThatBai = (donHang.getSoLanGiaoThatBai() == null) ? 0 : donHang.getSoLanGiaoThatBai();
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false, soLanGiaoThatBai);

		List<String> allStatuses = Arrays.asList("ƒêang x·ª≠ l√Ω", "ƒê√£ x√°c nh·∫≠n", "ƒêang chu·∫©n b·ªã h√†ng", "ƒêang giao h√†ng",
				"ƒê√£ ho√†n th√†nh", "ƒê√£ h·ªßy");

		List<String> displayedStatuses = allStatuses.stream().filter(status -> !status.contains("(Ch·ªù admin x√°c nh·∫≠n)"))
				.collect(Collectors.toList());

		int currentStatusIndex = displayedStatuses.indexOf(donHang.getTrangThaiDonHang());
		if (currentStatusIndex == -1) {
			currentStatusIndex = 0;
		}

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		model.addAttribute("formattedTongGiaTri", decimalFormat.format(donHang.getTongGiaTriDonHang()));
		model.addAttribute("formattedPhiVanChuyen", decimalFormat.format(donHang.getPhiVanChuyen()));
		model.addAttribute("formattedChiTietDonHang", formatOrderDetails(donHang));
		model.addAttribute("nextStatuses", nextStatuses);
		model.addAttribute("allStatuses", displayedStatuses);
		model.addAttribute("displayedStatuses", displayedStatuses);
		model.addAttribute("currentStatusIndex", currentStatusIndex);

		return "admin/order/view";
	}

	private Map<Integer, String> formatOrderPrices(Page<DonHang> donHangPage) {
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		return donHangPage.getContent().stream().collect(Collectors.toMap(DonHang::getMaDonHang,
				donHang -> decimalFormat.format(donHang.getTongGiaTriDonHang())));
	}

	private List<Map<String, String>> formatOrderDetails(DonHang donHang) {
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		return donHang.getChiTietDonHangs().stream().filter(chiTiet -> chiTiet.getSanPham() != null).map(chiTiet -> {
			Map<String, String> chiTietMap = new HashMap<>();
			chiTietMap.put("maSanPham", String.valueOf(chiTiet.getSanPham().getMaSanPham()));
			chiTietMap.put("hinhAnh", chiTiet.getSanPham().getHinhAnh());
			chiTietMap.put("tenSanPham", chiTiet.getSanPham().getTenSanPham());
			chiTietMap.put("soLuong", String.valueOf(chiTiet.getSoLuong()));
			chiTietMap.put("giaTaiThoiDiemDat", decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			chiTietMap.put("thanhTien", decimalFormat
					.format(chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()))));
			return chiTietMap;
		}).collect(Collectors.toList());
	}

//	private Map<Integer, String> formatOrderItemPrices(DonHang donHang) {
//		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
//		return donHang.getChiTietDonHangs().stream()
//				.collect(Collectors.toMap(chiTiet -> chiTiet.getSanPham().getMaSanPham(),
//						chiTiet -> decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat())));
//	}
//
//	private Map<Integer, String> formatOrderItemTotals(DonHang donHang) {
//		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
//		return donHang.getChiTietDonHangs().stream()
//				.collect(Collectors.toMap(chiTiet -> chiTiet.getSanPham().getMaSanPham(), chiTiet -> decimalFormat
//						.format(chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong())))));
//	}

//	private NguoiDungDetails getAuthenticatedUser() {
//		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//		return (NguoiDungDetails) authentication.getPrincipal();
//	}

	@PostMapping("/orders/{maDonHang}/assign-shipper")
	public String assignShipper(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam("shipperId") Integer shipperId, RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
			return "redirect:/admin/orders";
		}

		NguoiDung shipper = nguoiDungService.findById(shipperId);
		if (shipper == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y shipper!");
			return "redirect:/admin/orders/" + maDonHang;
		}

		// **Ki·ªÉm tra shipper v√† tr·∫°ng th√°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t**
		System.out.println("üí° [DEBUG] G√°n shipper: " + shipper.getTenNguoiDung() + " cho ƒë∆°n h√†ng " + maDonHang);

		// G√°n shipper v√†o ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
		donHang.setShipper(shipper);
		donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.capNhatTrangThai(donHang, "ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.updateDonHang(donHang);

		// **Ki·ªÉm tra tr·∫°ng th√°i sau khi c·∫≠p nh·∫≠t**
		System.out.println("‚úÖ [DEBUG] Tr·∫°ng th√°i ƒë∆°n h√†ng sau c·∫≠p nh·∫≠t: " + donHang.getTrangThaiDonHang());

		redirectAttributes.addFlashAttribute("successMessage",
				"ƒê√£ g√°n shipper th√†nh c√¥ng! ƒê∆°n h√†ng chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang chu·∫©n b·ªã h√†ng'.");

		return "redirect:/admin/orders/" + maDonHang;
	}

	@PostMapping("/orders/{maDonHang}/update-status")
	public String updateOrderStatus(@PathVariable("maDonHang") Integer maDonHang,
	                                @RequestParam("status") String action,
	                                @RequestParam(value = "shipperId", required = false) Integer shipperId,
	                                RedirectAttributes redirectAttributes) {

	    DonHang donHang = donHangService.getDonHangById(maDonHang);
	    if (donHang == null) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
	        return "redirect:/admin/orders";
	    }

	    // ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng
	    if ("confirm".equals(action)) {
	        donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
	        return "redirect:/admin/orders/" + maDonHang;
	    }
	 // ‚ùå H·ªßy ƒë∆°n h√†ng
	    else if ("cancel".equals(action)) {
	        donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
	    } 
	    // üö® Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
	    else {
	        redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
	    }

	    // ‚úÖ H·ªßy ƒë∆°n h√†ng
	    if ("cancel".equals(action)) {
	        donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
	        donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (n·∫øu c√≥)
	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
	        return "redirect:/admin/orders/" + maDonHang;
	    }

	    // ‚úÖ N·∫øu shipper b√°o "Giao h√†ng th·∫•t b·∫°i l·∫ßn 2"
	    if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)".equals(donHang.getTrangThaiChoXacNhan())
	            || "Giao th·∫•t b·∫°i".equals(action)) {
	        donHang.setTrangThaiDonHang("Giao th·∫•t b·∫°i");
	        donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng giao th·∫•t b·∫°i.");
	        return "redirect:/admin/orders/" + maDonHang;
	    }

	    // ‚úÖ N·∫øu admin ch·ªçn "Giao l·∫°i"
	 // ‚úÖ N·∫øu admin ch·ªçn "Giao l·∫°i"
	    if ("retry".equals(action)) {
	        if (donHang.getSoLanGiaoThatBai() >= 2) {
	            redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ giao l·∫°i v√¨ ƒë√£ th·∫•t b·∫°i 2 l·∫ßn.");
	            return "redirect:/admin/orders/" + maDonHang;
	        }

	        // üî• Ki·ªÉm tra shipper c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
	        if (shipperId == null || shipperId == 0) {
	            redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn shipper khi giao l·∫°i.");
	            return "redirect:/admin/orders/" + maDonHang;
	        }

	        // ‚úÖ L·∫•y th√¥ng tin shipper m·ªõi t·ª´ DB
	        NguoiDung shipperMoi = nguoiDungService.findById(shipperId);
	        if (shipperMoi == null) {
	            redirectAttributes.addFlashAttribute("errorMessage", "Shipper kh√¥ng h·ª£p l·ªá.");
	            return "redirect:/admin/orders/" + maDonHang;
	        }

	        // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
	        NguoiDung shipperCu = donHang.getShipper(); // L∆∞u shipper c≈©
	        donHang.setShipper(shipperMoi);
	        donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // ƒê·ªÉ shipper th·∫•y ƒë∆°n h√†ng
	        donHang.setTrangThaiChoXacNhan("Ch·ªù shipper x√°c nh·∫≠n l·∫°i"); // ƒê·ªÉ shipper m·ªõi x√°c nh·∫≠n giao l·∫°i
	        donHang.setSoLanGiaoThatBai(donHang.getSoLanGiaoThatBai() + 1); // TƒÉng s·ªë l·∫ßn giao th·∫•t b·∫°i

	        // ‚úÖ N·∫øu shipper c≈© kh√°c shipper m·ªõi, ghi nh·∫≠n vi·ªác b√†n giao ƒë∆°n h√†ng
	        if (shipperCu != null && !shipperCu.equals(shipperMoi)) {
	            String lichSu = donHang.getLichSuTrangThai() != null ? donHang.getLichSuTrangThai() : "";
	            String thoiGian = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
	            lichSu += "\nüõë " + thoiGian + " - ƒê∆°n h√†ng ƒë∆∞·ª£c b√†n giao t·ª´ " + shipperCu.getTenNguoiDung() 
	                    + " sang shipper " + shipperMoi.getTenNguoiDung();
	            donHang.setLichSuTrangThai(lichSu);
	        }

	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i cho " + shipperMoi.getTenNguoiDung());
	        return "redirect:/admin/orders/" + maDonHang;
	    }


	    // ‚úÖ N·∫øu kh√¥ng kh·ªõp v·ªõi tr·∫°ng th√°i n√†o ·ªü tr√™n
	    redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
	    return "redirect:/admin/orders/" + maDonHang;
	}




//
//	@PostMapping("/orders/{maDonHang}/update-status")
//	public String updateOrderStatus(@PathVariable("maDonHang") Integer maDonHang,
//			@RequestParam("status") String newStatus,
//			@RequestParam(value = "shipperId", required = false) Integer shipperId,
//			RedirectAttributes redirectAttributes) {
//
//		DonHang donHang = donHangService.getDonHangById(maDonHang);
//		if (donHang == null) {
//			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//			return "redirect:/admin/orders";
//		}
//
//		// ‚úÖ N·∫øu admin x√°c nh·∫≠n giao h√†ng th·∫•t b·∫°i l·∫ßn 2
//		if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)".equals(donHang.getTrangThaiChoXacNhan())
//				|| "Giao th·∫•t b·∫°i".equals(newStatus)) {
//			donHangService.capNhatTrangThai(donHang, "Giao th·∫•t b·∫°i");
//			donHang.setTrangThaiChoXacNhan(null);
//			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng giao th·∫•t b·∫°i.");
//			return "redirect:/admin/orders/" + maDonHang;
//		}
//
//		// ‚úÖ N·∫øu admin ch·ªçn "H·ªßy ƒë∆°n h√†ng"
//		if ("cancel".equals(newStatus)) {
//			donHangService.capNhatTrangThai(donHang, "ƒê√£ h·ªßy");
//			donHang.setTrangThaiChoXacNhan(null);
//			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
//			return "redirect:/admin/orders/" + maDonHang;
//		}
//
//		// ‚úÖ N·∫øu admin ch·ªçn "Giao l·∫°i"
//		if ("retry".equals(newStatus)) {
//			if (donHang.getSoLanGiaoThatBai() >= 2) {
//				redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ giao l·∫°i v√¨ ƒë√£ th·∫•t b·∫°i 2 l·∫ßn.");
//				return "redirect:/admin/orders/" + maDonHang;
//			}
//
//			if (shipperId == null || shipperId == 0) {
//				redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn shipper khi giao l·∫°i.");
//				return "redirect:/admin/orders/" + maDonHang;
//			}
//
//			NguoiDung shipper = nguoiDungService.findById(shipperId);
//			if (shipper == null) {
//				redirectAttributes.addFlashAttribute("errorMessage", "Shipper kh√¥ng h·ª£p l·ªá.");
//				return "redirect:/admin/orders/" + maDonHang;
//			}
//
//			donHang.setShipper(shipper);
//			donHangService.capNhatTrangThai(donHang, "ƒêang chu·∫©n b·ªã h√†ng");
//			donHang.setTrangThaiChoXacNhan("Ch·ªù shipper x√°c nh·∫≠n l·∫°i");
//			donHang.setSoLanGiaoThatBai(0);
//
//			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i.");
//			return "redirect:/admin/orders/" + maDonHang;
//		}
//
//		// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi m√† v·∫´n gi·ªØ l·ªãch s·ª≠
//		donHangService.capNhatTrangThai(donHang, newStatus);
//
//		redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.");
//		return "redirect:/admin/orders/" + maDonHang;
//	}

	// Trang x√°c nh·∫≠n ƒë∆°n h√†ng
//	@GetMapping("/order/confirm/{id}")
//	public String confirmOrder(@PathVariable("id") Integer id, Model model) {
//		DonHang donHang = donHangService.getDonHangById(id);
//		if (donHang == null) {
//			return "redirect:/admin/orders";
//		}
//
//		// Ki·ªÉm tra s·ªë l·∫ßn giao th·∫•t b·∫°i, n·∫øu null th√¨ set v·ªÅ 0 ƒë·ªÉ tr√°nh l·ªói
//		int soLanGiaoThatBai = donHang.getSoLanGiaoThatBai() != null ? donHang.getSoLanGiaoThatBai() : 0;
//		System.out.println("üöÄ S·ªë l·∫ßn giao th·∫•t b·∫°i: " + soLanGiaoThatBai);
//
//		// L·∫•y danh s√°ch tr·∫°ng th√°i ti·∫øp theo
//		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false, soLanGiaoThatBai);
//		System.out.println("üöÄ nextStatuses: " + nextStatuses); // Debug
//
//		model.addAttribute("nextStatuses", nextStatuses);
//		model.addAttribute("donHang", donHang);
//
//		return "admin/order/confirm_order"; // ƒêi·ªÅu h∆∞·ªõng ƒë√∫ng qua trang x√°c nh·∫≠n
//	}
	@GetMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, 
			Model model, 
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(id);

		// Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// Debug ki·ªÉm tra gi√° tr·ªã donHang
		System.out.println("üöÄ ƒê∆°n h√†ng: " + donHang.getMaDonHang());
		System.out.println("üöÄ Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());

		// Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (t·ª´ shipper)
		String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
		if (trangThaiChoXacNhan != null) {
			System.out.println("üöÄ Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper: " + trangThaiChoXacNhan);
		}

		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTriDonHang = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		Map<Integer, String> formattedGiaSanPhamMap = new HashMap<>();
		Map<Integer, String> formattedThanhTienMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			formattedGiaSanPhamMap.put(chiTiet.getSanPham().getMaSanPham(),
					decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
			formattedThanhTienMap.put(chiTiet.getSanPham().getMaSanPham(), decimalFormat.format(thanhTien));
		}
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Th√™m th√¥ng tin v√†o model
		// L·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER");
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false,
				donHang.getSoLanGiaoThatBai());
		model.addAttribute("nextStatuses", nextStatuses);

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTriDonHang", formattedTongGiaTriDonHang);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedGiaSanPhamMap", formattedGiaSanPhamMap);
		model.addAttribute("formattedThanhTienMap", formattedThanhTienMap);

		return "admin/order/confirm_order";
	}

	// X√°c nh·∫≠n ƒë∆°n h√†ng
	@PostMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, 
			@RequestParam("address") String address,
			@RequestParam("phone") String phone, 
			Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.confirmOrder(id, address, phone);
			return "redirect:/admin/orders";
		} catch (Exception e) {
			model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n ƒë∆°n h√†ng!");
			return "admin/order/confirm_order";
		}
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
	@PostMapping("/order/update")
	public String updateOrder(@ModelAttribute("donHang") DonHang donHang, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.updateDonHang(donHang);
			return "redirect:/admin/orders";
		} catch (RuntimeException e) {
			model.addAttribute("error", e.getMessage());
			return "admin/order/confirm_order";
		}
	}

//	@PostMapping("/orders/{maDonHang}/confirm-status")
//	public String confirmShipperStatus(@PathVariable("maDonHang") Integer maDonHang,
//			RedirectAttributes redirectAttributes) {
//
//		DonHang donHang = donHangService.getDonHangById(maDonHang);
//		if (donHang == null) {
//			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//			return "redirect:/admin/orders";
//		}
//
//		int soLanGiaoThatBai = (donHang.getSoLanGiaoThatBai() == null) ? 0 : donHang.getSoLanGiaoThatBai();
//
//		// N·∫øu tr·∫°ng th√°i c·∫ßn x√°c nh·∫≠n l√† "Giao th·∫•t b·∫°i"
//		if ("Giao th·∫•t b·∫°i".equals(donHang.getTrangThaiChoXacNhan())) {
//			soLanGiaoThatBai++;
//			donHang.setSoLanGiaoThatBai(soLanGiaoThatBai);
//
//			if (soLanGiaoThatBai >= 2) {
//				donHang.setTrangThaiDonHang("H·ªßy ƒë∆°n h√†ng");
//				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn v√† b·ªã h·ªßy.");
//			} else {
//				donHang.setTrangThaiDonHang("ƒêang giao l·∫°i l·∫ßn " + soLanGiaoThatBai);
//				redirectAttributes.addFlashAttribute("successMessage",
//						"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i l·∫ßn " + soLanGiaoThatBai);
//			}
//
//			donHang.setTrangThaiChoXacNhan(null);
//			donHangService.updateDonHang(donHang);
//			return "redirect:/admin/orders/" + maDonHang;
//		}
//
//		redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
//		return "redirect:/admin/orders/" + maDonHang;
//	}
	@PostMapping("/orders/{maDonHang}/confirm-status")
	public String confirmShipperStatus(@PathVariable("maDonHang") Integer maDonHang,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// ‚úÖ N·∫øu ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω, admin x√°c nh·∫≠n ƒë∆°n h√†ng
		if ("ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
			return "redirect:/admin/orders/" + maDonHang;
		}

		// ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper
		String trangThaiMoi = donHang.getTrangThaiChoXacNhan();
		if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
			return "redirect:/admin/orders/" + maDonHang;
		}
		// ‚úÖ N·∫øu tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n l√† "Giao l·∫°i ƒë∆°n h√†ng"
		if ("Giao l·∫°i ƒë∆°n h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒêang chu·∫©n b·ªã h√†ng"
			donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n giao l·∫°i.");
		}

		// ‚úÖ N·∫øu shipper b√°o "ƒêang giao h√†ng", admin x√°c nh·∫≠n ƒë∆°n h√†ng ƒëang giao
		if ("ƒêang giao h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang giao h√†ng");
			donHangService.capNhatTrangThai(donHang, "ƒêang giao h√†ng");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage",
					"ƒê√£ x√°c nh·∫≠n tr·∫°ng th√°i 'ƒêang giao h√†ng' t·ª´ shipper.");
		}
		// ‚úÖ N·∫øu shipper b√°o "Giao h√†ng th√†nh c√¥ng", admin x√°c nh·∫≠n ho√†n th√†nh
		else if ("ƒê√£ ho√†n th√†nh".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒê√£ ho√†n th√†nh");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.");
		}
		// ‚úÖ N·∫øu shipper b√°o "Giao th·∫•t b·∫°i"
		else if (trangThaiMoi.startsWith("Giao h√†ng th·∫•t b·∫°i")) {
			int soLanGiaoThatBai = (donHang.getSoLanGiaoThatBai() == null) ? 0 : donHang.getSoLanGiaoThatBai();
			soLanGiaoThatBai++;
			donHang.setSoLanGiaoThatBai(soLanGiaoThatBai);

			if (soLanGiaoThatBai >= 2) {
				donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
				donHang.setTrangThaiChoXacNhan(null);
				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn v√† b·ªã h·ªßy.");
			} else {
				donHang.setTrangThaiDonHang("Ch·ªù shipper x√°c nh·∫≠n l·∫°i");
				donHang.setTrangThaiChoXacNhan("Giao l·∫°i ƒë∆°n h√†ng");
				redirectAttributes.addFlashAttribute("successMessage",
						"ƒê∆°n h√†ng ƒëang ch·ªù shipper nh·∫≠n l·∫°i l·∫ßn " + soLanGiaoThatBai);
			}

			donHangService.updateDonHang(donHang);
		}
		// ‚úÖ N·∫øu tr·∫°ng th√°i l√† "Ch·ªù shipper x√°c nh·∫≠n l·∫°i"
		else if ("Ch·ªù shipper x√°c nh·∫≠n l·∫°i".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // Cho ph√©p shipper nh·∫≠n ƒë∆°n
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao l·∫°i cho shipper.");
		}
		// ‚úÖ N·∫øu tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
		else {
			redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
		}

		return "redirect:/admin/orders/" + maDonHang;
	}

//	@PostMapping("/orders/{maDonHang}/retry-delivery")
//	public String retryDelivery(@PathVariable("maDonHang") Integer maDonHang,
//	        RedirectAttributes redirectAttributes) {
//	    DonHang donHang = donHangService.getDonHangById(maDonHang);
//	    if (donHang == null) {
//	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//	        return "redirect:/admin/orders";
//	    }
//
//	    // ‚úÖ Reset tr·∫°ng th√°i v√† quay l·∫°i b∆∞·ªõc ch·ªçn shipper
//	    donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
//	    donHang.setSoLanGiaoThatBai(0);
//	    donHangService.updateDonHang(donHang);
//	    redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i. H√£y ch·ªçn shipper.");
//	    return "redirect:/admin/orders/" + maDonHang;
//	}
	@PostMapping("/orders/{maDonHang}/cancel-order")
	public String cancelOrder(@PathVariable("maDonHang") Integer maDonHang, RedirectAttributes redirectAttributes) {
	    DonHang donHang = donHangService.getDonHangById(maDonHang);
	    if (donHang == null) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
	        return "redirect:/admin/orders";
	    }

	    // N·∫øu ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω, cho ph√©p h·ªßy
	    if ("ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
	        donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
	        donHangService.updateDonHang(donHang);
	        redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.");
	    } else {
	        redirectAttributes.addFlashAttribute("errorMessage", "Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'ƒêang x·ª≠ l√Ω'.");
	    }

	    return "redirect:/admin/orders";
	}


	// Ki·ªÉm tra tr·∫°ng th√°i ti·∫øp theo c√≥ h·ª£p l·ªá kh√¥ng

	@ModelAttribute("getNextStatuses")
	public List<String> getNextStatuses(String currentStatus, boolean isShipperConfirmed, Integer soLanGiaoThatBai) {
		if (currentStatus == null || currentStatus.isEmpty()) {
			return Collections.emptyList();
		}

		List<String> nextStatuses = new ArrayList<>();

		switch (currentStatus) {
		case "ƒêang x·ª≠ l√Ω":
			nextStatuses.add("ƒê√£ x√°c nh·∫≠n");
			nextStatuses.add("ƒê√£ h·ªßy");
			break;
		case "ƒê√£ x√°c nh·∫≠n":
			nextStatuses.add("ƒêang chu·∫©n b·ªã h√†ng");
			break;
		case "ƒêang chu·∫©n b·ªã h√†ng":
			nextStatuses.add("ƒêang giao h√†ng");
			break;
		case "ƒêang giao h√†ng":
			if (isShipperConfirmed) {
				nextStatuses.add("ƒê√£ ho√†n th√†nh");
			} else {
				nextStatuses.add("Ch·ªù x√°c nh·∫≠n t·ª´ shipper");
			}
			break;
		case "Giao th·∫•t b·∫°i":
			if (soLanGiaoThatBai < 2) {
				nextStatuses.add("ƒêang giao l·∫°i l·∫ßn " + (soLanGiaoThatBai + 1));
			} else {
				nextStatuses.add("H·ªßy ƒë∆°n h√†ng");
			}
			break;
		case "ƒê√£ ho√†n th√†nh":
		case "ƒê√£ h·ªßy":
			break;
		}

		System.out.println("üöÄ nextStatuses: " + nextStatuses);
		return nextStatuses;
	}
	
	@GetMapping("/orders/{maDonHang}/confirm-status")
	public String confirmOrderPage(
			  @PathVariable("maDonHang") Integer maDonHang,
			Model model, 
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		// Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// Debug ki·ªÉm tra gi√° tr·ªã donHang
		System.out.println("üöÄ ƒê∆°n h√†ng: " + donHang.getMaDonHang());
		System.out.println("üöÄ Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());

		// Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (t·ª´ shipper)
		String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
		if (trangThaiChoXacNhan != null) {
			System.out.println("üöÄ Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper: " + trangThaiChoXacNhan);
		}

		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTriDonHang = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		Map<Integer, String> formattedGiaSanPhamMap = new HashMap<>();
		Map<Integer, String> formattedThanhTienMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			formattedGiaSanPhamMap.put(chiTiet.getSanPham().getMaSanPham(),
					decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
			formattedThanhTienMap.put(chiTiet.getSanPham().getMaSanPham(), decimalFormat.format(thanhTien));
		}
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Th√™m th√¥ng tin v√†o model
		// L·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER");
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false,
				donHang.getSoLanGiaoThatBai());
		model.addAttribute("nextStatuses", nextStatuses);

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTriDonHang", formattedTongGiaTriDonHang);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedGiaSanPhamMap", formattedGiaSanPhamMap);
		model.addAttribute("formattedThanhTienMap", formattedThanhTienMap);

	    return "admin/order/confirm_order";

	}

}