package com.kimngan.ComesticAdmin.controller.admin;

import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.repository.NguoiDungRepository;
import com.kimngan.ComesticAdmin.repository.SanPhamRepository;
import com.kimngan.ComesticAdmin.services.ChiTietDonHangService;
import com.kimngan.ComesticAdmin.services.ChiTietDonNhapHangService;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.SanPhamService;

import jakarta.servlet.http.HttpServletRequest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import java.security.Principal;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/admin")
public class OrderController {
	@Autowired
	private SanPhamService sanPhamService;
	@Autowired
	private DonHangService donHangService;

	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private ChiTietDonHangService chiTietDonHangService;

	@Autowired
	private NguoiDungRepository nguoiDungRepository;
	@Autowired
	private SanPhamRepository sanPhamRepository;
	@Autowired
	private ChiTietDonNhapHangService chiTietDonNhapHangService;

	@GetMapping("/orders")
	public String getOrders(HttpServletRequest request, Model model,
			@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "size", defaultValue = "10") int size,
			@RequestParam(value = "status", required = false) String status) {

		page = Math.max(page, 0);
		PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "maDonHang"));
		Page<DonHang> donHangPage = (status != null && !status.equals("all"))
				? donHangService.getDonHangsByStatus(status, pageRequest)
				: donHangService.getAllDonHangs(pageRequest);

		Map<Integer, String> formattedTongGiaTriMap = formatOrderPrices(donHangPage);
		model.addAttribute("formattedTongGiaTriMap", formattedTongGiaTriMap);
		model.addAttribute("donHangs", donHangPage.getContent());
		model.addAttribute("currentPage", donHangPage.getNumber());
		model.addAttribute("totalPages", donHangPage.getTotalPages());
		model.addAttribute("size", size);
		model.addAttribute("selectedStatus", status);
		model.addAttribute("searchAction", "/admin/orders");
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		return "admin/order/index";
	}

	@GetMapping("/orders/{maDonHang}")
	public String viewOrder(@PathVariable("maDonHang") Integer maDonHang, Model model) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			return "redirect:/admin/orders";
		}

		// N·∫øu tr·∫°ng th√°i c·∫ßn admin ch·ªçn l·∫°i shipper, lu√¥n l·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = new ArrayList<>();
		if ("Giao h√†ng th·∫•t b·∫°i".equals(donHang.getTrangThaiChoXacNhan())
				|| "ƒê√£ x√°c nh·∫≠n".equals(donHang.getTrangThaiDonHang())) {
			danhSachShipper = nguoiDungService.findByRole("SHIPPER").stream()
				    .filter(NguoiDung::isTrangThai)
				    .collect(Collectors.toList());

		}

		model.addAttribute("danhSachShipper", danhSachShipper);

		Integer soLanGiaoThatBai = (donHang.getSoLanGiaoThatBai() == null) ? 0 : donHang.getSoLanGiaoThatBai();
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false, soLanGiaoThatBai);

		List<String> allStatuses = Arrays.asList("ƒêang x·ª≠ l√Ω", "ƒê√£ x√°c nh·∫≠n", "ƒêang chu·∫©n b·ªã h√†ng", "ƒêang giao h√†ng",
				"ƒê√£ ho√†n th√†nh", "ƒê√£ h·ªßy");

		List<String> displayedStatuses = allStatuses.stream().filter(status -> !status.contains("(Ch·ªù x√°c nh·∫≠n)"))
				.collect(Collectors.toList());

		int currentStatusIndex = displayedStatuses.indexOf(donHang.getTrangThaiDonHang());
		if (currentStatusIndex == -1) {
			currentStatusIndex = 0;
		}

		// Danh s√°ch s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l∆∞·ª£ng tr√™n k·ªá
		Map<Integer, Integer> soLuongTrenKeMap = new HashMap<>();
		Map<Integer, Integer> soLuongTonKhoMap = new HashMap<>();

		System.out.println("üìå ƒê∆°n h√†ng: " + donHang.getMaDonHang());

		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			SanPham sanPham = chiTiet.getSanPham();
			if (sanPham == null) {
				System.out.println("‚ö† L·ªñI: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m cho ƒë∆°n h√†ng " + donHang.getMaDonHang());
				continue;
			}

			int soLuongTrenKe = sanPham.getSoLuong();
			Integer tongSoLuongNhap = chiTietDonNhapHangService
					.getTotalImportedQuantityBySanPhamId(sanPham.getMaSanPham());
			Integer soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPham.getMaSanPham());

			// Ki·ªÉm tra n·∫øu NULL th√¨ ƒë·∫∑t v·ªÅ 0
			tongSoLuongNhap = (tongSoLuongNhap == null) ? 0 : tongSoLuongNhap;
			soLuongBan = (soLuongBan == null) ? 0 : soLuongBan;

			// T√≠nh s·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø
			int soLuongTonKho = tongSoLuongNhap - soLuongBan - soLuongTrenKe;

			// Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr√™n console
			System.out.println(" S·∫£n ph·∫©m: " + sanPham.getTenSanPham());
			System.out.println(" S·ªë l∆∞·ª£ng ƒë·∫∑t: " + chiTiet.getSoLuong());
			System.out.println(" S·ªë l∆∞·ª£ng tr√™n k·ªá: " + soLuongTrenKe);
			System.out.println(" S·ªë l∆∞·ª£ng trong kho: " + soLuongTonKho);
			System.out.println("------------------------------");

			soLuongTrenKeMap.put(sanPham.getMaSanPham(), soLuongTrenKe);
			soLuongTonKhoMap.put(sanPham.getMaSanPham(), soLuongTonKho);
		}

		model.addAttribute("donHang", donHang);

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		model.addAttribute("formattedTongGiaTri", decimalFormat.format(donHang.getTongGiaTriDonHang()));
		model.addAttribute("formattedPhiVanChuyen", decimalFormat.format(donHang.getPhiVanChuyen()));
		model.addAttribute("formattedChiTietDonHang", formatOrderDetails(donHang));
		model.addAttribute("nextStatuses", nextStatuses);
		model.addAttribute("allStatuses", displayedStatuses);
		model.addAttribute("displayedStatuses", displayedStatuses);
		model.addAttribute("currentStatusIndex", currentStatusIndex);

		model.addAttribute("soLuongTrenKeMap", soLuongTrenKeMap);
		model.addAttribute("soLuongTonKhoMap", soLuongTonKhoMap);

		return "admin/order/view";
	}

	private Map<Integer, String> formatOrderPrices(Page<DonHang> donHangPage) {
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		return donHangPage.getContent().stream().collect(Collectors.toMap(DonHang::getMaDonHang,
				donHang -> decimalFormat.format(donHang.getTongGiaTriDonHang())));
	}

	private List<Map<String, String>> formatOrderDetails(DonHang donHang) {
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		return donHang.getChiTietDonHangs().stream().filter(chiTiet -> chiTiet.getSanPham() != null).map(chiTiet -> {
			Map<String, String> chiTietMap = new HashMap<>();
			chiTietMap.put("maSanPham", String.valueOf(chiTiet.getSanPham().getMaSanPham()));
			chiTietMap.put("hinhAnh", chiTiet.getSanPham().getHinhAnh());
			chiTietMap.put("tenSanPham", chiTiet.getSanPham().getTenSanPham());
			chiTietMap.put("soLuong", String.valueOf(chiTiet.getSoLuong()));
			chiTietMap.put("giaTaiThoiDiemDat", decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			chiTietMap.put("thanhTien", decimalFormat
					.format(chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()))));
			return chiTietMap;
		}).collect(Collectors.toList());
	}

//	G√°n shipper cho ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
	@PostMapping("/orders/{maDonHang}/assign-shipper")
	public String assignShipper(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam("shipperId") Integer shipperId, RedirectAttributes redirectAttributes, Principal principal) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
			return "redirect:/admin/orders";
		}

		NguoiDung shipper = nguoiDungService.findById(shipperId);
		if (shipper == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y shipper!");
			return "redirect:/admin/orders/" + maDonHang;
		}
		String tenAdmin = principal.getName();
		NguoiDung admin = nguoiDungService.findByTenNguoiDung(tenAdmin);

		System.out.println("üí° [DEBUG] G√°n shipper: " + shipper.getTenNguoiDung() + " cho ƒë∆°n h√†ng " + maDonHang);

		// G√°n shipper v√†o ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
		donHang.setShipper(shipper);
		donHang.setSeller(admin);
		donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.capNhatTrangThai(donHang, "ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.updateDonHang(donHang);

		// **Ki·ªÉm tra tr·∫°ng th√°i sau khi c·∫≠p nh·∫≠t**
		System.out.println("  [DEBUG] Tr·∫°ng th√°i ƒë∆°n h√†ng sau c·∫≠p nh·∫≠t: " + donHang.getTrangThaiDonHang());

		redirectAttributes.addFlashAttribute("successMessage",
				"ƒê√£ g√°n shipper th√†nh c√¥ng! ƒê∆°n h√†ng chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang chu·∫©n b·ªã h√†ng'.");

		return "redirect:/admin/orders/" + maDonHang;
	}

//X√°c nh·∫≠n, h·ªßy, giao l·∫°i, x·ª≠ l√Ω th·∫•t b·∫°i ƒë∆°n h√†ng
	@PostMapping("/orders/{maDonHang}/update-status")
	public String updateOrderStatus(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam(value = "cancelReason", required = false) String cancelReason,
			@RequestParam("status") String action,
			@RequestParam(value = "shipperId", required = false) Integer shipperId,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// X√°c nh·∫≠n ƒë∆°n h√†ng
		if ("confirm".equals(action)) {
			donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
			// N·∫øu ƒë∆°n h√†ng thanh to√°n b·∫±ng VNPay, set t·ªïng gi√° tr·ªã v·ªÅ 0

			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
			return "redirect:/admin/orders/" + maDonHang;
		}
		if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)".equals(donHang.getTrangThaiChoXacNhan()) || "Giao th·∫•t b·∫°i".equals(action)) {
			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
			donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng giao th·∫•t b·∫°i.");
			return "redirect:/admin/orders/" + maDonHang;
		}

		// H·ªßy ƒë∆°n h√†ng
//		else if ("cancel".equals(action)) {
//
//			if (cancelReason == null || cancelReason.trim().isEmpty()) {
//				redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng.");
//				return "redirect:/admin/orders/" + maDonHang;
//			}
//			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
//			donHang.setGhiChu(cancelReason);
//			donHangService.updateDonHang(donHang);
//			redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
//		}
//		// Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
//		else {
//			redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
//		}

		// H·ªßy ƒë∆°n h√†ng (c·∫£ do admin h·ªßy th·ªß c√¥ng & giao th·∫•t b·∫°i)
		if ("cancel".equals(action)) {
			String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
			String thoiGian = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
			String ghiChuCu = donHang.getGhiChu() != null ? donHang.getGhiChu() : "";
			ghiChuCu = ghiChuCu.replace("L·∫ßn 1:", "").trim();
			String lyDo;

			// N·∫øu l√† do giao th·∫•t b·∫°i
			if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)".equals(trangThaiChoXacNhan)) {
				lyDo = "";
			} else {
				// N·∫øu admin t·ª± h·ªßy, ph·∫£i nh·∫≠p l√Ω do
				if (cancelReason == null || cancelReason.trim().isEmpty()) {
					redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng.");
					return "redirect:/admin/orders/" + maDonHang;
				}
				// X·ª≠ l√Ω r√µ r√†ng khi ng∆∞·ªùi d√πng ch·ªçn "Kh√°c"
				if ("Kh√°c".equals(cancelReason)) {
					lyDo = request.getParameter("customCancelReason");
				} else {
					lyDo = cancelReason;
				}
			}

			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
			donHang.setTrangThaiChoXacNhan(null);
			donHang.setGhiChu(ghiChuCu + "\n" + lyDo.trim());
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
			return "redirect:/admin/orders/" + maDonHang;
		}

		// N·∫øu shipper b√°o "Giao h√†ng th·∫•t b·∫°i l·∫ßn 2"
//		if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)".equals(donHang.getTrangThaiChoXacNhan()) || "Giao th·∫•t b·∫°i".equals(action)) {
//			donHang.setTrangThaiDonHang("Giao th·∫•t b·∫°i");
//			donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
//			donHangService.updateDonHang(donHang);
//			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng giao th·∫•t b·∫°i.");
//			return "redirect:/admin/orders/" + maDonHang;
//		}

		// N·∫øu admin ch·ªçn "Giao l·∫°i"
		if ("retry".equals(action)) {
			if (donHang.getSoLanGiaoThatBai() >= 2) {
				redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ giao l·∫°i v√¨ ƒë√£ th·∫•t b·∫°i 2 l·∫ßn.");
				return "redirect:/admin/orders/" + maDonHang;
			}

			// Ki·ªÉm tra shipper c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
			if (shipperId == null || shipperId == 0) {
				redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn shipper khi giao l·∫°i.");
				return "redirect:/admin/orders/" + maDonHang;
			}

			// L·∫•y th√¥ng tin shipper m·ªõi t·ª´ DB
			NguoiDung shipperMoi = nguoiDungService.findById(shipperId);
			if (shipperMoi == null) {
				redirectAttributes.addFlashAttribute("errorMessage", "Shipper kh√¥ng h·ª£p l·ªá.");
				return "redirect:/admin/orders/" + maDonHang;
			}

			// C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
			NguoiDung shipperCu = donHang.getShipper(); // L∆∞u shipper c≈©
			donHang.setShipper(shipperMoi);
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // ƒê·ªÉ shipper th·∫•y ƒë∆°n h√†ng
			donHang.setTrangThaiChoXacNhan("Ch·ªù shipper x√°c nh·∫≠n l·∫°i"); // ƒê·ªÉ shipper m·ªõi x√°c nh·∫≠n giao l·∫°i
			donHang.setSoLanGiaoThatBai(donHang.getSoLanGiaoThatBai() + 1); // TƒÉng s·ªë l·∫ßn giao th·∫•t b·∫°i

			// N·∫øu shipper c≈© kh√°c shipper m·ªõi, ghi nh·∫≠n vi·ªác b√†n giao ƒë∆°n h√†ng
			if (shipperCu != null && !shipperCu.equals(shipperMoi)) {
				String lichSu = donHang.getLichSuTrangThai() != null ? donHang.getLichSuTrangThai() : "";
				String thoiGian = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
				lichSu += "\nüõë " + thoiGian + " - ƒê∆°n h√†ng ƒë∆∞·ª£c b√†n giao t·ª´ " + shipperCu.getTenNguoiDung()
						+ " sang shipper " + shipperMoi.getTenNguoiDung();
				donHang.setLichSuTrangThai(lichSu);
			}

			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage",
					"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i cho " + shipperMoi.getTenNguoiDung());
			return "redirect:/admin/orders/" + maDonHang;
		}

		// N·∫øu kh√¥ng kh·ªõp v·ªõi tr·∫°ng th√°i n√†o ·ªü tr√™n
		redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
		return "redirect:/admin/orders/" + maDonHang;
	}

//Ph∆∞∆°ng th·ª©c n√†y d√πng ƒë·ªÉ hi·ªÉn th·ªã giao di·ªán x√°c nh·∫≠n ƒë∆°n h√†ng v·ªõi th√¥ng tin chi ti·∫øt, 
	// shipper, tr·∫°ng th√°i ƒë∆°n h√†ng v√† c√°c l·ª±a ch·ªçn ti·∫øp theo.
	@GetMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(id);

		// Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// Debug ki·ªÉm tra gi√° tr·ªã donHang
		System.out.println("ƒê∆°n h√†ng: " + donHang.getMaDonHang());
		System.out.println("Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());

		// Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (t·ª´ shipper)
		String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
		if (trangThaiChoXacNhan != null) {
			System.out.println(" Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper: " + trangThaiChoXacNhan);
		}

		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTriDonHang = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		Map<Integer, String> formattedGiaSanPhamMap = new HashMap<>();
		Map<Integer, String> formattedThanhTienMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			formattedGiaSanPhamMap.put(chiTiet.getSanPham().getMaSanPham(),
					decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
			formattedThanhTienMap.put(chiTiet.getSanPham().getMaSanPham(), decimalFormat.format(thanhTien));
		}
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Th√™m th√¥ng tin v√†o model
		// L·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER")
			    .stream()
			    .filter(NguoiDung::isTrangThai) // ch·ªâ l·∫•y shipper c√≥ tr·∫°ng th√°i = true
			    .collect(Collectors.toList());
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false,
				donHang.getSoLanGiaoThatBai());
		model.addAttribute("nextStatuses", nextStatuses);

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTriDonHang", formattedTongGiaTriDonHang);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedGiaSanPhamMap", formattedGiaSanPhamMap);
		model.addAttribute("formattedThanhTienMap", formattedThanhTienMap);

		return "admin/order/confirm_order";
	}

	// X√°c nh·∫≠n ƒë∆°n h√†ng
	@PostMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, @RequestParam("address") String address,
			@RequestParam("phone") String phone, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.confirmOrder(id, address, phone);
			return "redirect:/admin/orders";
		} catch (Exception e) {
			model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n ƒë∆°n h√†ng!");
			return "admin/order/confirm_order";
		}
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
	@PostMapping("/order/update")
	public String updateOrder(@ModelAttribute("donHang") DonHang donHang, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.updateDonHang(donHang);
			return "redirect:/admin/orders";
		} catch (RuntimeException e) {
			model.addAttribute("error", e.getMessage());
			return "admin/order/confirm_order";
		}
	}

	@PostMapping("/orders/{maDonHang}/confirm-status")
	public String confirmShipperStatus(@PathVariable("maDonHang") Integer maDonHang,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}
		// Tr∆∞·ªùng h·ª£p 1: ƒê∆°n h√†ng ƒëang "Ch·ªù x√°c nh·∫≠n" ‚Üí Chuy·ªÉn th√†nh "ƒêang x·ª≠ l√Ω"
		if ("Ch·ªù x√°c nh·∫≠n".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒêang x·ª≠ l√Ω");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang x·ª≠ l√Ω'.");
			return "redirect:/admin/orders";
			// return "redirect:/orders/" + maDonHang + "/confirm-status";
		}
		// N·∫øu ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω, admin x√°c nh·∫≠n ƒë∆°n h√†ng
		if ("ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
			return "redirect:/admin/orders/" + maDonHang;
		}

		// Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper
		String trangThaiMoi = donHang.getTrangThaiChoXacNhan();
		if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
			return "redirect:/admin/orders/" + maDonHang;
		}
		// N·∫øu tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n l√† "Giao l·∫°i ƒë∆°n h√†ng"
		if ("Giao l·∫°i ƒë∆°n h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒêang chu·∫©n b·ªã h√†ng"
			donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n giao l·∫°i.");
		}

		// N·∫øu shipper b√°o "ƒêang giao h√†ng", admin x√°c nh·∫≠n ƒë∆°n h√†ng ƒëang giao
		if ("ƒêang giao h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang giao h√†ng");
			donHangService.capNhatTrangThai(donHang, "ƒêang giao h√†ng");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage",
					"ƒê√£ x√°c nh·∫≠n tr·∫°ng th√°i 'ƒêang giao h√†ng' t·ª´ shipper.");
		}
		// N·∫øu shipper b√°o "Giao h√†ng th√†nh c√¥ng", admin x√°c nh·∫≠n ho√†n th√†nh
		else if ("ƒê√£ ho√†n th√†nh".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒê√£ ho√†n th√†nh");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.");
		}
		// N·∫øu shipper b√°o "Giao th·∫•t b·∫°i"
		else if (trangThaiMoi.startsWith("Giao h√†ng th·∫•t b·∫°i")) {
			int soLanGiaoThatBai = (donHang.getSoLanGiaoThatBai() == null) ? 0 : donHang.getSoLanGiaoThatBai();
			soLanGiaoThatBai++;
			donHang.setSoLanGiaoThatBai(soLanGiaoThatBai);

			if (soLanGiaoThatBai >= 2) {
				donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
				donHang.setTrangThaiChoXacNhan(null);
				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn v√† b·ªã h·ªßy.");
			} else {
				donHang.setTrangThaiDonHang("Ch·ªù shipper x√°c nh·∫≠n l·∫°i");
				donHang.setTrangThaiChoXacNhan("Giao l·∫°i ƒë∆°n h√†ng");
				redirectAttributes.addFlashAttribute("successMessage",
						"ƒê∆°n h√†ng ƒëang ch·ªù shipper nh·∫≠n l·∫°i l·∫ßn " + soLanGiaoThatBai);
			}

			donHangService.updateDonHang(donHang);
		}
		// N·∫øu tr·∫°ng th√°i l√† "Ch·ªù shipper x√°c nh·∫≠n l·∫°i"
		else if ("Ch·ªù shipper x√°c nh·∫≠n l·∫°i".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // Cho ph√©p shipper nh·∫≠n ƒë∆°n
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao l·∫°i cho shipper.");
		}
		// N·∫øu tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
		else {
			redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
		}
		// return "redirect:/orders/" + maDonHang;
		return "redirect:/admin/orders/" + maDonHang;
	}

	@PostMapping("/orders/{maDonHang}/cancel-order")
	public String cancelOrder(@PathVariable("maDonHang") Integer maDonHang, RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
			return "redirect:/admin/orders";
		}

		// N·∫øu ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω, cho ph√©p h·ªßy
		if ("ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.");
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'ƒêang x·ª≠ l√Ω'.");
		}

		return "redirect:/admin/orders";
	}

	// Ki·ªÉm tra tr·∫°ng th√°i ti·∫øp theo c√≥ h·ª£p l·ªá kh√¥ng

	@ModelAttribute("getNextStatuses")
	public List<String> getNextStatuses(String currentStatus, boolean isShipperConfirmed, Integer soLanGiaoThatBai) {
		if (currentStatus == null || currentStatus.isEmpty()) {
			return Collections.emptyList();
		}

		List<String> nextStatuses = new ArrayList<>();

		switch (currentStatus) {
		case "ƒêang x·ª≠ l√Ω":
			nextStatuses.add("ƒê√£ x√°c nh·∫≠n");
			nextStatuses.add("ƒê√£ h·ªßy");
			break;
		case "ƒê√£ x√°c nh·∫≠n":
			nextStatuses.add("ƒêang chu·∫©n b·ªã h√†ng");
			break;
		case "ƒêang chu·∫©n b·ªã h√†ng":
			nextStatuses.add("ƒêang giao h√†ng");
			break;
		case "ƒêang giao h√†ng":
			if (isShipperConfirmed) {
				nextStatuses.add("ƒê√£ ho√†n th√†nh");
			} else {
				nextStatuses.add("Ch·ªù x√°c nh·∫≠n t·ª´ shipper");
			}
			break;
		case "Giao th·∫•t b·∫°i":
			if (soLanGiaoThatBai < 2) {
				nextStatuses.add("ƒêang giao l·∫°i l·∫ßn " + (soLanGiaoThatBai + 1));
			} else {
				nextStatuses.add("H·ªßy ƒë∆°n h√†ng");
			}
			break;
		case "ƒê√£ ho√†n th√†nh":
		case "ƒê√£ h·ªßy":
			break;
		}

		System.out.println(" nextStatuses: " + nextStatuses);
		return nextStatuses;
	}

	@GetMapping("/orders/{maDonHang}/confirm-status")
	public String confirmOrderPage(@PathVariable("maDonHang") Integer maDonHang, Model model,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		// Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// Debug ki·ªÉm tra gi√° tr·ªã donHang
		System.out.println(" ƒê∆°n h√†ng: " + donHang.getMaDonHang());
		System.out.println(" Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());

		// Ki·ªÉm tra tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (t·ª´ shipper)
		String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
		if (trangThaiChoXacNhan != null) {
			System.out.println("üöÄ Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper: " + trangThaiChoXacNhan);
		}

		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTriDonHang = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		Map<Integer, String> formattedGiaSanPhamMap = new HashMap<>();
		Map<Integer, String> formattedThanhTienMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			formattedGiaSanPhamMap.put(chiTiet.getSanPham().getMaSanPham(),
					decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
			formattedThanhTienMap.put(chiTiet.getSanPham().getMaSanPham(), decimalFormat.format(thanhTien));
		}
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Th√™m th√¥ng tin v√†o model
		List<NguoiDung> danhSachNhanVienXuatKho = nguoiDungService.findByRole("XUAT_KHO");
		model.addAttribute("danhSachNhanVienXuatKho", danhSachNhanVienXuatKho);

		// L·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER")
			    .stream()
			    .filter(NguoiDung::isTrangThai) // ch·ªâ l·∫•y shipper c√≥ tr·∫°ng th√°i = true
			    .collect(Collectors.toList());
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false,
				donHang.getSoLanGiaoThatBai());
		model.addAttribute("nextStatuses", nextStatuses);
		// Chu·∫©n b·ªã d·ªØ li·ªáu cho giao di·ªán
		Map<Integer, Boolean> sanPhamCanXuatKhoMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			sanPhamCanXuatKhoMap.put(chiTiet.getSanPham().getMaSanPham(), chiTiet.getSoLuong() >= 10);
		}

		// Truy·ªÅn v√†o Model
		model.addAttribute("sanPhamCanXuatKhoMap", sanPhamCanXuatKhoMap);

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTriDonHang", formattedTongGiaTriDonHang);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedGiaSanPhamMap", formattedGiaSanPhamMap);
		model.addAttribute("formattedThanhTienMap", formattedThanhTienMap);

		return "admin/order/confirm_order";

	}

	@GetMapping("/offline-orders")
	public String showOfflineOrderForm(@RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
			@RequestParam(value = "size", defaultValue = "5") int size,
			@RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(value = "selectedProductIds", required = false) String selectedProductIdsStr,
			@RequestParam(value = "selectedQuantities", required = false) String selectedQuantitiesStr,
			HttpServletRequest request, Model model) {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof NguoiDungDetails) {
			NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
			model.addAttribute("user", userDetails);
		} else {
			model.addAttribute("user", null);
		}

		model.addAttribute("requestUri", request.getRequestURI());

		List<Integer> selectedProductIds = new ArrayList<>();
		List<Integer> selectedQuantities = new ArrayList<>();

		if (selectedProductIdsStr != null && !selectedProductIdsStr.isEmpty()) {
			selectedProductIds = Arrays.stream(selectedProductIdsStr.split(",")).map(Integer::parseInt)
					.collect(Collectors.toList());
		}

		if (selectedQuantitiesStr != null && !selectedQuantitiesStr.isEmpty()) {
			selectedQuantities = Arrays.stream(selectedQuantitiesStr.split(",")).map(q -> {
				String[] parts = q.split(":");
				return parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
			}).collect(Collectors.toList());
		}

		// Pageable pageable = PageRequest.of(page, size);
		Page<SanPham> sanPhamPage;
		if (keyword != null && !keyword.isEmpty()) {
			sanPhamPage = sanPhamService.searchActiveByName(keyword, PageRequest.of(page, size));
		} else {
			sanPhamPage = sanPhamService.findAllActiveWithStock(PageRequest.of(page, size));
		}

		if (sanPhamPage.isEmpty()) {
			model.addAttribute("noProductsMessage", "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.");
		}

		LocalDate today = LocalDate.now();
		Map<Integer, String> formattedPrices = new HashMap<>();
		Map<Integer, String> formattedDiscountPrices = new HashMap<>();
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");

		for (SanPham sp : sanPhamPage.getContent()) {
			BigDecimal giaGoc = sp.getDonGiaBan();
			formattedPrices.put(sp.getMaSanPham(), decimalFormat.format(giaGoc) + " VND");

			Optional<KhuyenMai> highestKhuyenMai = sp.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
					.filter(km -> km.getNgayBatDau() != null && km.getNgayKetThuc() != null
							&& !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			if (highestKhuyenMai.isPresent() && highestKhuyenMai.get().getPhanTramGiamGia() != null) {
				BigDecimal phanTramGiam = highestKhuyenMai.get().getPhanTramGiamGia();
				BigDecimal giaSauGiam = giaGoc.subtract(giaGoc.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));

				formattedDiscountPrices.put(sp.getMaSanPham(),
						"<del style='color:grey; font-size:14px;'>" + decimalFormat.format(giaGoc) + " VND</del> "
								+ "<span class='text-danger fw-bold'>" + decimalFormat.format(giaSauGiam)
								+ " VND</span>");
			} else {
				formattedDiscountPrices.put(sp.getMaSanPham(), decimalFormat.format(giaGoc) + " VND");
			}
		}

		model.addAttribute("selectedProductIds", selectedProductIds);
		model.addAttribute("selectedQuantities", selectedQuantities);
		model.addAttribute("sanPhamList", sanPhamPage.getContent());
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", sanPhamPage.getTotalPages());
		model.addAttribute("formattedDiscountPrices", formattedDiscountPrices);

		return "admin/order/offline-order";
	}

	@GetMapping("/offline-orders/confirm")
	public String confirmOfflineOrder(Model model,
			@RequestParam(value = "soDienThoai", required = false) String soDienThoai) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof NguoiDungDetails) {
			NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
			model.addAttribute("user", userDetails);
		}

		List<ChiTietDonHang> orderItems = donHangService.getCurrentOfflineOrder();

		if (orderItems.isEmpty()) {
			model.addAttribute("orderItems", Collections.emptyList());
			model.addAttribute("totalPrice", "0 VND");
			return "admin/order/offline-order-confirm";
		}

		LocalDate today = LocalDate.now();
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");

		BigDecimal totalPrice = BigDecimal.ZERO;
		Map<Integer, String> formattedDiscountPrices = new HashMap<>();

		for (ChiTietDonHang chiTiet : orderItems) {
			SanPham sp = chiTiet.getSanPham();

			// Load danh s√°ch khuy·∫øn m√£i tr∆∞·ªõc khi x·ª≠ l√Ω
			sp.setKhuyenMais(new HashSet<>(
					sanPhamRepository.findByIdInWithKhuyenMai(List.of(sp.getMaSanPham())).get(0).getKhuyenMais()));

			Optional<KhuyenMai> highestKhuyenMai = sp.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			BigDecimal giaSauGiam = sp.getDonGiaBan();
			if (highestKhuyenMai.isPresent()) {
				BigDecimal phanTramGiam = highestKhuyenMai.get().getPhanTramGiamGia();
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
			}

			formattedDiscountPrices.put(sp.getMaSanPham(), decimalFormat.format(giaSauGiam) + " VND");
			totalPrice = totalPrice.add(giaSauGiam.multiply(BigDecimal.valueOf(chiTiet.getSoLuong())));
		}

		// // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i, n·∫øu t√¨m th·∫•y kh√°ch h√†ng th√¨ l·∫•y th√¥ng tin
		NguoiDung khachHang = nguoiDungRepository.findBySoDienThoai(soDienThoai).orElse(null);
		if (khachHang != null) {
			model.addAttribute("tenKhachHang", khachHang.getHoTen());
			model.addAttribute("soDienThoai", khachHang.getSoDienThoai());
		} else {
			model.addAttribute("tenKhachHang", "Kh√°ch v√£ng lai");
			model.addAttribute("soDienThoai", "0000000000");
		}

		// ƒê·ªãa ch·ªâ lu√¥n l√† "Mua t·∫°i qu·∫ßy KN" d√π kh√°ch c√≥ t√†i kho·∫£n hay kh√¥ng
		model.addAttribute("diaChiGiaoHang", "Mua t·∫°i qu·∫ßy KN");

		model.addAttribute("orderItems", orderItems);
		model.addAttribute("totalPrice", decimalFormat.format(totalPrice) + " VND");
		model.addAttribute("formattedDiscountPrices", formattedDiscountPrices);

		return "admin/order/offline-order-confirm";
	}

	@PostMapping("/offline-orders/confirm")
	public String confirmSelectedProducts(
			@RequestParam(value = "selectedProducts", required = false) List<Integer> selectedProductIds,
			@RequestParam Map<String, String> allParams, RedirectAttributes redirectAttributes, Principal principal) {

		// Ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
		if (selectedProductIds == null || selectedProductIds.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m.");
			return "redirect:/admin/offline-orders";
		}

		// X·ª≠ l√Ω danh s√°ch s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng
		List<Integer> selectedQuantities = new ArrayList<>();
		for (Integer productId : selectedProductIds) {
			String quantityStr = allParams.get("quantities[" + productId + "]");
			int quantity = (quantityStr != null && !quantityStr.isEmpty()) ? Integer.parseInt(quantityStr) : 1;
			selectedQuantities.add(quantity);
		}

		// G·ªçi `donHangService` ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng offline
		donHangService.processOfflineOrder(selectedProductIds, selectedQuantities);

		return "redirect:/admin/offline-orders/confirm";
	}

	@PostMapping("/offline-orders/remove")
	public String removeFromOfflineOrder(@RequestParam("sanPhamId") Integer sanPhamId,
			RedirectAttributes redirectAttributes) {
		donHangService.removeFromOfflineOrder(sanPhamId);
		redirectAttributes.addFlashAttribute("successMessage", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ƒë∆°n h√†ng!");
		return "redirect:/admin/offline-orders/confirm";
	}

	@PostMapping("/offline-orders/checkout")
	public String checkoutOfflineOrder(RedirectAttributes redirectAttributes,
			@RequestParam(value = "soDienThoai", required = false) String soDienThoai) {
		System.out.println("üîµ S·ªë ƒëi·ªán tho·∫°i nh·∫≠n ƒë∆∞·ª£c khi checkout: " + soDienThoai);

		if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
			soDienThoai = "0000000000"; // Kh√°ch v√£ng lai
		}

		boolean isConfirmed = donHangService.processAndGenerateInvoiceForOfflineOrder(soDienThoai);

		if (isConfirmed) {
			redirectAttributes.addFlashAttribute("successMessage", "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
			return "redirect:/admin/orders";
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.");
			return "redirect:/admin/offline-orders/confirm";
		}
	}

	@PostMapping("/offline-orders/check-phone")
	public String checkPhone(@RequestParam(value = "soDienThoai", required = false) String soDienThoai,
			RedirectAttributes redirectAttributes) {
		System.out.println("üîµ Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i: " + soDienThoai);

		if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage",
					"Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu l√† kh√°ch v√£ng lai.");
			return "redirect:/admin/offline-orders/confirm";
		}

		Optional<NguoiDung> optionalKhachHang = nguoiDungRepository.findBySoDienThoai(soDienThoai);
		if (optionalKhachHang.isPresent()) {
			NguoiDung khachHang = optionalKhachHang.get();
			redirectAttributes.addAttribute("tenKhachHang", khachHang.getHoTen());
			redirectAttributes.addAttribute("soDienThoai", khachHang.getSoDienThoai());
			System.out.println("üü¢ T√¨m th·∫•y kh√°ch h√†ng: " + khachHang.getTenNguoiDung());
		} else {
			redirectAttributes.addAttribute("tenKhachHang", "Kh√°ch v√£ng lai");
			redirectAttributes.addAttribute("soDienThoai", "0000000000");
			redirectAttributes.addFlashAttribute("errorMessage",
					"Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng. Ti·∫øp t·ª•c v·ªõi kh√°ch v√£ng lai.");
			System.out.println("üî¥ Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng -> Kh√°ch v√£ng lai");
		}
		return "redirect:/admin/offline-orders/confirm";
	}

	@PostMapping("/offline-orders/add")
	public String addProductToOrder(@RequestParam("sanPhamId") Integer sanPhamId,
			@RequestParam("soLuong") Integer soLuong, RedirectAttributes redirectAttributes) {

		Optional<SanPham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
		if (optionalSanPham.isPresent()) {
			donHangService.addToOfflineOrder(optionalSanPham.get(), soLuong);
			redirectAttributes.addFlashAttribute("successMessage", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o ƒë∆°n h√†ng!");
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
		}

		return "redirect:/admin/offline-orders"; // Gi·ªØ nguy√™n trang
	}

// C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c giao ƒë∆°n h√†ng cho nh√¢n vi√™n xu·∫•t kho

//	@PostMapping("/orders/{maDonHang}/assign-export-staff")
//	public String assignExportStaff(@PathVariable("maDonHang") Integer maDonHang,
//	                                @RequestParam("handlingOption") String handlingOption,
//	                                @RequestParam(value = "maNhanVienXuatKho", required = false) Integer maNhanVienXuatKho,
//	                                RedirectAttributes redirectAttributes) {
//	    DonHang donHang = donHangService.getDonHangById(maDonHang);
//	    if (donHang == null) {
//	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//	        return "redirect:/admin/orders";
//	    }
//	    
//	   
//	    
//	    // Tr∆∞·ªùng h·ª£p 2: Giao t·ª´ kho (Nh√¢n vi√™n xu·∫•t kho x·ª≠ l√Ω)
//
//	    if ("export".equals(handlingOption)) { // Giao t·ª´ kho
//	        if (maNhanVienXuatKho == null) {
//	            redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn nh√¢n vi√™n xu·∫•t kho.");
//	            return "redirect:/admin/orders/" + maDonHang;
//	        }
//
//	        NguoiDung nhanVienXuatKho = nguoiDungService.findById(maNhanVienXuatKho);
//	        if (nhanVienXuatKho == null || !"XUAT_KHO".equals(nhanVienXuatKho.getQuyenTruyCap().getTenQuyen())) {
//	            redirectAttributes.addFlashAttribute("errorMessage", "Nh√¢n vi√™n xu·∫•t kho kh√¥ng h·ª£p l·ªá.");
//	            return "redirect:/admin/orders/" + maDonHang;
//	        }
//
//	        //  G√°n nh√¢n vi√™n xu·∫•t kho v√†o ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
//	        donHang.setTrangThaiDonHang("Ch·ªù xu·∫•t kho");
//	        donHang.setNhanVienXuatKho(nhanVienXuatKho);
//	        donHangService.updateDonHang(donHang);
//
//	        redirectAttributes.addFlashAttribute("successMessage",
//	                "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao cho nh√¢n vi√™n xu·∫•t kho: " + nhanVienXuatKho.getTenNguoiDung());
//
//	    } else if ("shelf".equals(handlingOption)) { //  L·∫•y t·ª´ k·ªá
//	        donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
//	        donHangService.updateDonHang(donHang);
//
//	        redirectAttributes.addFlashAttribute("successMessage",
//	                "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† l·∫•y h√†ng tr·ª±c ti·∫øp t·ª´ k·ªá.");
//	    }
//
//	    return "redirect:/admin/orders";
//	}
//	@PostMapping("/orders/{maDonHang}/assign-export-staff")
//	public String assignExportStaff(@PathVariable("maDonHang") Integer maDonHang,
//	                                @RequestParam(value = "maNhanVienXuatKho", required = false) Integer maNhanVienXuatKho,
//	                                RedirectAttributes redirectAttributes) {
//	    DonHang donHang = donHangService.getDonHangById(maDonHang);
//	    if (donHang == null) {
//	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
//	        return "redirect:/admin/orders";
//	    }
//
//	    boolean requiresWarehouseExport = false;
//
//	    for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
//	        if (chiTiet.getSoLuong() >= 10) {
//	            requiresWarehouseExport = true;
//	            break;
//	        }
//	    }
//
//	    if (requiresWarehouseExport) {
//	        if (maNhanVienXuatKho == null) {
//	            redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn nh√¢n vi√™n xu·∫•t kho.");
//	            return "redirect:/admin/orders/" + maDonHang;
//	        }
//
//	        NguoiDung nhanVienXuatKho = nguoiDungService.findById(maNhanVienXuatKho);
//	        if (nhanVienXuatKho == null || !"XUAT_KHO".equals(nhanVienXuatKho.getQuyenTruyCap().getTenQuyen())) {
//	            redirectAttributes.addFlashAttribute("errorMessage", "Nh√¢n vi√™n xu·∫•t kho kh√¥ng h·ª£p l·ªá.");
//	            return "redirect:/admin/orders/" + maDonHang;
//	        }
//
//	        //  Giao nh√¢n vi√™n xu·∫•t kho x·ª≠ l√Ω ph·∫ßn t·ª´ kho
//	        donHang.setTrangThaiDonHang("Ch·ªù xu·∫•t kho");
//	        donHang.setNhanVienXuatKho(nhanVienXuatKho);
//	        donHangService.updateDonHang(donHang);
//
//	        redirectAttributes.addFlashAttribute("successMessage",
//	                "ƒê∆°n h√†ng c√≥ s·∫£n ph·∫©m s·ªë l∆∞·ª£ng l·ªõn ƒë√£ giao cho nh√¢n vi√™n xu·∫•t kho: " + nhanVienXuatKho.getTenNguoiDung());
//
//	    } else {
//	        //  N·∫øu t·∫•t c·∫£ s·∫£n ph·∫©m < 10, tr·ª´ tr·ª±c ti·∫øp t·ª´ k·ªá
//	        for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
//	            SanPham sanPham = chiTiet.getSanPham();
//	            if (sanPham.getSoLuong() < chiTiet.getSoLuong()) {
//	                redirectAttributes.addFlashAttribute("errorMessage",
//	                        "Kh√¥ng ƒë·ªß h√†ng tr√™n k·ªá cho s·∫£n ph·∫©m: " + sanPham.getTenSanPham());
//	                return "redirect:/admin/orders/" + maDonHang;
//	            }
//
//	            //  Tr·ª´ h√†ng tr·ª±c ti·∫øp t·ª´ k·ªá
//	            sanPham.setSoLuong(sanPham.getSoLuong() - chiTiet.getSoLuong());
//	            sanPhamService.update(sanPham);
//	        }
//
//	        donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
//	        donHangService.updateDonHang(donHang);
//	        redirectAttributes.addFlashAttribute("successMessage",
//	                "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† l·∫•y h√†ng tr·ª±c ti·∫øp t·ª´ k·ªá.");
//	    }
//
//	    return "redirect:/admin/orders";
//	}

}