package com.kimngan.ComesticAdmin.controller.admin;

import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import jakarta.servlet.http.HttpServletRequest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import java.text.DecimalFormat;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/admin")
public class OrderController {


	@Autowired
	private DonHangService donHangService;



	@Autowired
	private NguoiDungService nguoiDungService;


	// Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng
	@GetMapping("/orders")
	public String getOrders(HttpServletRequest request, Model model,
			@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "size", defaultValue = "10") int size,
			@RequestParam(value = "status", required = false) String status) {

		if (page < 0) {
			page = 0;
		}
		// S·∫Øp x·∫øp theo m√£ ƒë∆°n h√†ng gi·∫£m d·∫ßn
		PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "maDonHang"));

		// Th·ª±c hi·ªán logic x·ª≠ l√Ω t√¨m ki·∫øm v√† ph√¢n trang nh∆∞ b√¨nh th∆∞·ªùng
		// Th·ª±c hi·ªán logic x·ª≠ l√Ω t√¨m ki·∫øm v√† ph√¢n trang nh∆∞ b√¨nh th∆∞·ªùng
		Page<DonHang> donHangPage = (status != null && !status.equals("all"))
				? donHangService.getDonHangsByStatus(status, pageRequest)
				: donHangService.getAllDonHangs(pageRequest);

		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		Map<Integer, String> formattedTongGiaTriMap = new HashMap<>();
		for (DonHang donHang : donHangPage.getContent()) {
			formattedTongGiaTriMap.put(donHang.getMaDonHang(), decimalFormat.format(donHang.getTongGiaTriDonHang()));
		}

		model.addAttribute("formattedTongGiaTriMap", formattedTongGiaTriMap);

		model.addAttribute("donHangs", donHangPage.getContent());
		model.addAttribute("currentPage", donHangPage.getNumber());
		model.addAttribute("totalPages", donHangPage.getTotalPages());
		model.addAttribute("size", size);
		model.addAttribute("selectedStatus", status);
		model.addAttribute("searchAction", "/admin/orders");

		// Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o model
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Th√™m requestUri v√†o model ƒë·ªÉ s·ª≠ d·ª•ng trong header
		model.addAttribute("requestUri", request.getRequestURI());

		return "admin/order/index";
	}

	// Xem chi ti·∫øt ƒë∆°n h√†ng (cho ph√©p admin s·ª≠a tr·∫°ng th√°i ƒë∆°n h√†ng)

	@GetMapping("/orders/{maDonHang}")
	public String viewOrder(@PathVariable("maDonHang") Integer maDonHang, Model model) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			return "redirect:/admin/orders"; // N·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i, chuy·ªÉn v·ªÅ danh s√°ch ƒë∆°n h√†ng
		}

		// ‚úÖ L·∫•y danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER");

		// üî• Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng khi Admin m·ªü trang chi ti·∫øt
		System.out.println("‚úÖ Tr·∫°ng th√°i ƒë∆°n h√†ng: " + donHang.getTrangThaiDonHang());
		System.out.println("‚úÖ Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n: " + donHang.getTrangThaiChoXacNhan());

		List<String> nextStatuses;
		if (donHang.getTrangThaiChoXacNhan() != null && !donHang.getTrangThaiChoXacNhan().isEmpty()) {
			nextStatuses = Arrays.asList(donHang.getTrangThaiChoXacNhan());
		} else {
			nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false);
		}
		// ‚úÖ N·∫øu tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n != null th√¨ d√πng n√≥, ng∆∞·ª£c l·∫°i l·∫•y tr·∫°ng th√°i
		// hi·ªán t·∫°i

		// ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªán t·∫°i
		String currentStatus = (donHang.getTrangThaiChoXacNhan() != null && !donHang.getTrangThaiChoXacNhan().isEmpty())
				? donHang.getTrangThaiChoXacNhan()
				: donHang.getTrangThaiDonHang();

		if (currentStatus == null || currentStatus.isEmpty()) {
			currentStatus = "ƒêang x·ª≠ l√Ω"; // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
		}

		// ‚úÖ Danh s√°ch tr·∫°ng th√°i hi·ªÉn th·ªã (kh√¥ng c√≥ "Ch·ªù admin x√°c nh·∫≠n")
		List<String> allStatuses = Arrays.asList("ƒêang x·ª≠ l√Ω", "ƒê√£ x√°c nh·∫≠n", "ƒêang chu·∫©n b·ªã h√†ng", "ƒêang giao h√†ng",
				"ƒê√£ ho√†n th√†nh", "ƒê√£ h·ªßy");

		// ‚úÖ X√≥a tr·∫°ng th√°i c√≥ ch·ªØ "Ch·ªù admin x√°c nh·∫≠n"
		List<String> displayedStatuses = allStatuses.stream().filter(status -> !status.contains("(Ch·ªù admin x√°c nh·∫≠n)"))
				.collect(Collectors.toList());

		// ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªán t·∫°i
		int currentStatusIndex = displayedStatuses.indexOf(currentStatus);
		if (currentStatusIndex == -1) {
			currentStatusIndex = 0; // Tr√°nh l·ªói n·∫øu tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
		}

		// ‚úÖ ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTri = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		// ‚úÖ ƒê·ªãnh d·∫°ng c√°c gi√° tr·ªã trong chi ti·∫øt ƒë∆°n h√†ng
		List<Map<String, String>> formattedChiTietDonHang = new ArrayList<>();
		if (donHang.getChiTietDonHangs() == null || donHang.getChiTietDonHangs().isEmpty()) {
			model.addAttribute("error", "ƒê∆°n h√†ng kh√¥ng c√≥ chi ti·∫øt s·∫£n ph·∫©m.");
		} else {
			for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
				if (chiTiet.getSanPham() == null) {
					continue;
				}
				Map<String, String> chiTietMap = new HashMap<>();
				chiTietMap.put("maSanPham", String.valueOf(chiTiet.getSanPham().getMaSanPham()));
				chiTietMap.put("hinhAnh", chiTiet.getSanPham().getHinhAnh());
				chiTietMap.put("tenSanPham", chiTiet.getSanPham().getTenSanPham());
				chiTietMap.put("soLuong", String.valueOf(chiTiet.getSoLuong()));
				chiTietMap.put("giaTaiThoiDiemDat", decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));

				BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
				chiTietMap.put("thanhTien", decimalFormat.format(thanhTien));

				formattedChiTietDonHang.add(chiTietMap);
			}
		}
		System.out.println("üöÄ nextStatuses: " + nextStatuses);
		model.addAttribute("nextStatuses", nextStatuses);
		// ‚úÖ G·∫Øn d·ªØ li·ªáu v√†o model
		model.addAttribute("allStatuses", displayedStatuses);

		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTri", formattedTongGiaTri);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedChiTietDonHang", formattedChiTietDonHang);
		model.addAttribute("displayedStatuses", displayedStatuses);
		model.addAttribute("currentStatusIndex", currentStatusIndex);

		// ‚úÖ Th√™m th√¥ng tin ng∆∞·ªùi d√πng
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		return "admin/order/view"; // Tr·∫£ v·ªÅ trang view ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
	}
	@PostMapping("/orders/{maDonHang}/assign-shipper")
	public String assignShipper(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam("shipperId") Integer shipperId, RedirectAttributes redirectAttributes) {
		try {
			DonHang donHang = donHangService.getDonHangById(maDonHang);
			if (donHang == null) {
				redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
				return "redirect:/admin/orders";
			}

			NguoiDung shipper = nguoiDungService.findById(shipperId);
			if (shipper == null) {
				redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y shipper!");
				return "redirect:/admin/orders/" + maDonHang;
			}

			// ‚úÖ G√°n shipper v√†o ƒë∆°n h√†ng
			donHang.setShipper(shipper);
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng"); // Admin ch·ªâ chu·∫©n b·ªã h√†ng, ch∆∞a giao

			donHangService.updateDonHang(donHang);
			System.out.println("‚úÖ ƒê∆°n h√†ng " + maDonHang + " ƒë√£ g√°n cho shipper " + shipperId);

			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ g√°n shipper th√†nh c√¥ng!");
		} catch (Exception e) {
			redirectAttributes.addFlashAttribute("errorMessage", "L·ªói khi g√°n shipper: " + e.getMessage());
		}

		return "redirect:/admin/orders/" + maDonHang;
	}


	@PostMapping("/orders/{maDonHang}/update-status")
	public String updateOrderStatus(@PathVariable("maDonHang") Integer maDonHang,
	                                @RequestParam("status") String newStatus,
	                                @RequestParam(value = "shipperId", required = false) Integer shipperId,
	                                RedirectAttributes redirectAttributes) {

	    DonHang donHang = donHangService.getDonHangById(maDonHang);
	    if (donHang == null) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
	        return "redirect:/admin/orders";
	    }

	    System.out.println("‚úÖ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i cho ƒë∆°n h√†ng: " + maDonHang);
	    System.out.println("Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());
	    System.out.println("Tr·∫°ng th√°i m·ªõi: " + newStatus);

	    // ‚úÖ B·∫Øt bu·ªôc ch·ªçn shipper tr∆∞·ªõc khi chuy·ªÉn sang "ƒêang chu·∫©n b·ªã h√†ng"
	    if ("ƒêang chu·∫©n b·ªã h√†ng".equals(newStatus) && (shipperId == null || shipperId <= 0)) {
	        redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn shipper tr∆∞·ªõc khi chu·∫©n b·ªã h√†ng.");
	        return "redirect:/admin/orders/" + maDonHang;
	    }

	    // ‚úÖ N·∫øu c√≥ shipper, g√°n shipper v√†o ƒë∆°n h√†ng
	    if (shipperId != null && shipperId > 0) {
	        NguoiDung shipper = nguoiDungService.findById(shipperId);
	        if (shipper != null) {
	            donHang.setShipper(shipper);
	        }
	    }
	 // üî• Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh th√¨ t·∫°o h√≥a ƒë∆°n
	   
	    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
	    donHang.setTrangThaiDonHang(newStatus);
	    donHangService.updateDonHang(donHang);
	    System.out.println("üîç Gi√° tr·ªã newStatus nh·∫≠n ƒë∆∞·ª£c t·ª´ request: '" + newStatus + "'");
	    System.out.println("üöÄ G·ªçi updateOrderStatus() v·ªõi maDonHang: " + maDonHang);

	    redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.");
	    return "redirect:/admin/orders/" + maDonHang;
	}


	// Trang x√°c nh·∫≠n ƒë∆°n h√†ng
	@GetMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, Model model) {
		DonHang donHang = donHangService.getDonHangById(id);
		// Th√™m ƒëo·∫°n code l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		if (donHang == null) {
			return "redirect:/admin/orders"; // N·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i, chuy·ªÉn v·ªÅ trang danh s√°ch
		}

		// L·∫•y danh s√°ch shipper ƒë·ªÉ admin ch·ªçn n·∫øu c·∫ßn
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER");
		model.addAttribute("danhSachShipper", danhSachShipper);
		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
		String formattedTongGiaTriDonHang = decimalFormat.format(donHang.getTongGiaTriDonHang());
		String formattedPhiVanChuyen = decimalFormat.format(donHang.getPhiVanChuyen());

		Map<Integer, String> formattedGiaSanPhamMap = new HashMap<>();
		Map<Integer, String> formattedThanhTienMap = new HashMap<>();
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			formattedGiaSanPhamMap.put(chiTiet.getSanPham().getMaSanPham(),
					decimalFormat.format(chiTiet.getGiaTaiThoiDiemDat()));
			BigDecimal thanhTien = chiTiet.getGiaTaiThoiDiemDat().multiply(new BigDecimal(chiTiet.getSoLuong()));
			formattedThanhTienMap.put(chiTiet.getSanPham().getMaSanPham(), decimalFormat.format(thanhTien));
		}
		// Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o model

		model.addAttribute("donHang", donHang);
		model.addAttribute("formattedTongGiaTriDonHang", formattedTongGiaTriDonHang);
		model.addAttribute("formattedPhiVanChuyen", formattedPhiVanChuyen);
		model.addAttribute("formattedGiaSanPhamMap", formattedGiaSanPhamMap);
		model.addAttribute("formattedThanhTienMap", formattedThanhTienMap);

		return "admin/order/confirm";
	}

	// X√°c nh·∫≠n ƒë∆°n h√†ng
	@PostMapping("/order/confirm/{id}")
	public String confirmOrder(@PathVariable("id") Integer id, @RequestParam("address") String address,
			@RequestParam("phone") String phone, Model model) {

		// Th√™m ƒëo·∫°n code l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.confirmOrder(id, address, phone);
			return "redirect:/admin/orders";
		} catch (Exception e) {
			model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n ƒë∆°n h√†ng!");

			return "admin/order/view";
		}
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
	@PostMapping("/order/update")
	public String updateOrder(@ModelAttribute("donHang") DonHang donHang, Model model) {
		// Th√™m ƒëo·∫°n code l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);
		try {
			donHangService.updateDonHang(donHang);
			return "redirect:/admin/orders";
		} catch (RuntimeException e) {
			model.addAttribute("error", e.getMessage());

			return "admin/order/view";
		}
	}

	@PostMapping("/orders/{maDonHang}/confirm-status")
	public String confirmShipperStatus(@PathVariable("maDonHang") Integer maDonHang,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/admin/orders";
		}

		// ‚úÖ Ki·ªÉm tra n·∫øu shipper ƒë√£ g·ª≠i tr·∫°ng th√°i m·ªõi
		if (donHang.getTrangThaiChoXacNhan() != null) {
			donHang.setTrangThaiDonHang(donHang.getTrangThaiChoXacNhan());
			donHang.setTrangThaiChoXacNhan(null); // X√≥a tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n

			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n tr·∫°ng th√°i ƒë∆°n h√†ng.");
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
		}

		return "redirect:/admin/orders/" + maDonHang;
	}
	// Ki·ªÉm tra tr·∫°ng th√°i ti·∫øp theo c√≥ h·ª£p l·ªá kh√¥ng
	

	@ModelAttribute("getNextStatuses")
	public List<String> getNextStatuses(String currentStatus, boolean isShipperConfirmed) {
		if (currentStatus == null || currentStatus.isEmpty()) {
			return Collections.emptyList();
		}

		List<String> nextStatuses = new ArrayList<>();

		switch (currentStatus) {
		case "ƒêang x·ª≠ l√Ω":
			nextStatuses.add("ƒê√£ x√°c nh·∫≠n");
			nextStatuses.add("ƒê√£ h·ªßy");
			break;

		case "ƒê√£ x√°c nh·∫≠n":
			nextStatuses.add("ƒêang chu·∫©n b·ªã h√†ng");
			break;

		case "ƒêang chu·∫©n b·ªã h√†ng":
			nextStatuses.add("ƒêang giao h√†ng");
			break;

		case "ƒêang giao h√†ng":
			if (isShipperConfirmed) {
				nextStatuses.add("ƒê√£ ho√†n th√†nh");
			}
			break;

		case "ƒê√£ ho√†n th√†nh":
		case "ƒê√£ h·ªßy":
			break;
		}

		System.out.println("‚úÖ Tr·∫°ng th√°i h·ª£p l·ªá ti·∫øp theo: " + nextStatuses);
		return nextStatuses;
	}

}