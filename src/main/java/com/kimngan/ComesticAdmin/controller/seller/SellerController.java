package com.kimngan.ComesticAdmin.controller.seller;

import java.math.BigDecimal;
import java.security.Principal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.repository.NguoiDungRepository;
import com.kimngan.ComesticAdmin.repository.SanPhamRepository;
import com.kimngan.ComesticAdmin.services.ChiTietDonNhapHangService;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.SanPhamService;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping("/seller")
public class SellerController {

	@Autowired
	private DonHangService donHangService;

	@Autowired
	private NguoiDungService nguoiDungService;
	@Autowired
	private SanPhamService sanPhamService;

	@Autowired
	private ChiTietDonNhapHangService chiTietDonNhapHangService;
	@Autowired
	private NguoiDungRepository nguoiDungRepository;
	@Autowired
	private SanPhamRepository sanPhamRepository;

	@GetMapping("/login")
	public String loginPage() {
		return "seller/login"; // file login.html trong th∆∞ m·ª•c templates/seller/
	}

	@ModelAttribute("user")
	public NguoiDung getCurrentUser(Principal principal) {
		if (principal != null) {
			return nguoiDungService.findByTenNguoiDung(principal.getName());
		}
		return null;
	}

	@GetMapping("/orders")
	public String getOrdersForSeller(Model model,

			@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "size", defaultValue = "10") int size,
			@RequestParam(value = "status", required = false, defaultValue = "all") String status) {

		page = Math.max(page, 0);
		PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "maDonHang"));

		Page<DonHang> donHangPage = (status != null && !status.equals("all"))
				? donHangService.getDonHangsByStatus(status, pageRequest)
				: donHangService.getAllDonHangs(pageRequest);

		model.addAttribute("donHangs", donHangPage.getContent());
		model.addAttribute("currentPage", donHangPage.getNumber());
		model.addAttribute("totalPages", donHangPage.getTotalPages());
		model.addAttribute("size", size);
		model.addAttribute("selectedStatus", status);
		model.addAttribute("searchAction", "/seller/orders");

		// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p

		return "seller/order/index";
	}

	@GetMapping("/orders/{maDonHang}")
	public String viewOrderForSeller(@PathVariable("maDonHang") Integer maDonHang, Model model) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			return "redirect:/seller/orders";
		}

		// L·∫•y ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Truy·ªÅn ƒë∆°n h√†ng
		model.addAttribute("donHang", donHang);

		// ‚úÖ Th√™m danh s√°ch shipper v√†o n·∫øu ƒë∆°n ƒëang ch·ªù g√°n shipper
		if ("ƒê√£ x√°c nh·∫≠n".equals(donHang.getTrangThaiDonHang())) {
			List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER").stream()
					.filter(NguoiDung::isTrangThai) 
					.collect(Collectors.toList());
			model.addAttribute("danhSachShipper", danhSachShipper);
		}
		System.out.println("üìå Ghi ch√∫ hi·ªán t·∫°i:\n" + donHang.getGhiChu());

		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER").stream().filter(NguoiDung::isTrangThai) 
				.collect(Collectors.toList());
		model.addAttribute("danhSachShipper", danhSachShipper);
		return "seller/order/view";
	}

	@PostMapping("/orders/{maDonHang}/assign-shipper")
	public String assignShipperForSeller(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam("shipperId") Integer shipperId, RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
			return "redirect:/seller/orders";
		}

		NguoiDung shipper = nguoiDungService.findById(shipperId);
		if (shipper == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y shipper!");
			return "redirect:/seller/orders/" + maDonHang;
		}
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		NguoiDung seller = nguoiDungService.findByTenNguoiDung(userDetails.getUsername());
		donHang.setSeller(seller); // üëà G√ÅN NG∆Ø·ªúI B√ÅN ·ªû ƒê√ÇY

		// G√°n shipper v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
		donHang.setShipper(shipper);
		donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.capNhatTrangThai(donHang, "ƒêang chu·∫©n b·ªã h√†ng");
		donHangService.updateDonHang(donHang);

		redirectAttributes.addFlashAttribute("successMessage",
				"ƒê√£ g√°n shipper th√†nh c√¥ng! ƒê∆°n h√†ng chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang chu·∫©n b·ªã h√†ng'.");

		return "redirect:/seller/orders/" + maDonHang;
	}

	@GetMapping("/orders/confirm/{id}")
	public String confirmOrderForSeller(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(id);

		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/seller/orders";
		}

		// Debug
		System.out.println("‚úÖ ƒê∆°n h√†ng c·∫ßn x√°c nh·∫≠n: " + donHang.getMaDonHang());
		System.out.println("üì¶ Tr·∫°ng th√°i hi·ªán t·∫°i: " + donHang.getTrangThaiDonHang());

		String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
		if (trangThaiChoXacNhan != null) {
			System.out.println("‚è≥ Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n t·ª´ shipper: " + trangThaiChoXacNhan);
		}

		// Ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		// Danh s√°ch shipper
		List<NguoiDung> danhSachShipper = nguoiDungService.findByRole("SHIPPER").stream().filter(NguoiDung::isTrangThai) 
				.collect(Collectors.toList());

		// Tr·∫°ng th√°i ti·∫øp theo c√≥ th·ªÉ ch·ªçn
		List<String> nextStatuses = getNextStatuses(donHang.getTrangThaiDonHang(), false,
				donHang.getSoLanGiaoThatBai());
		String trangThaiMoi = donHang.getTrangThaiChoXacNhan();
		System.out.println("üöö Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n ti·∫øp theo t·ª´ shipper: " + trangThaiMoi);

		if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
			return "redirect:/seller/orders/" + id;
		}

		// ƒê∆∞a d·ªØ li·ªáu ra giao di·ªán
		model.addAttribute("donHang", donHang);
		model.addAttribute("danhSachShipper", danhSachShipper);
		model.addAttribute("nextStatuses", nextStatuses);

		return "redirect:/seller/orders/" + id;// nh·ªõ t·∫°o file n√†y
	}

	@PostMapping("/orders/{maDonHang}/update-status")
	public String updateOrderStatusFromSeller(@PathVariable("maDonHang") Integer maDonHang,
			@RequestParam(value = "cancelReason", required = false) String cancelReason,
			@RequestParam("status") String action,
			@RequestParam(value = "shipperId", required = false) Integer shipperId,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/seller/orders";
		}

		// X√°c nh·∫≠n ƒë∆°n h√†ng
		if ("confirm".equals(action)) {
			donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		// H·ªßy do giao th·∫•t b·∫°i l·∫ßn 2
		if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 2)".equals(donHang.getTrangThaiChoXacNhan()) || "Giao th·∫•t b·∫°i".equals(action)) {
			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng giao th·∫•t b·∫°i.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		// H·ªßy ƒë∆°n h√†ng th·ªß c√¥ng
		if ("cancel".equals(action)) {
			String trangThaiChoXacNhan = donHang.getTrangThaiChoXacNhan();
			String thoiGian = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
			String ghiChuCu = donHang.getGhiChu() != null ? donHang.getGhiChu() : "";

			String lyDo;

			if ("Giao h√†ng th·∫•t b·∫°i (L·∫ßn 1)".equals(trangThaiChoXacNhan)) {
				lyDo = "";
			} else {
				if (cancelReason == null || cancelReason.trim().isEmpty()) {
					redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng.");
					return "redirect:/seller/orders/" + maDonHang;
				}

				// X·ª≠ l√Ω r√µ r√†ng khi ng∆∞·ªùi d√πng ch·ªçn "Kh√°c"
				if ("Kh√°c".equals(cancelReason)) {
					lyDo = request.getParameter("customCancelReason");
				} else {
					lyDo = cancelReason;
				}
			}

			donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
			donHang.setTrangThaiChoXacNhan(null);
			donHang.setGhiChu((ghiChuCu + "\n" + lyDo).trim());
			donHangService.updateDonHang(donHang);

			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		// Giao l·∫°i ƒë∆°n h√†ng
		if ("retry".equals(action)) {
			if (donHang.getSoLanGiaoThatBai() >= 2) {
				redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ giao l·∫°i v√¨ ƒë√£ th·∫•t b·∫°i 2 l·∫ßn.");
				return "redirect:/seller/orders/" + maDonHang;
			}

			if (shipperId == null || shipperId == 0) {
				redirectAttributes.addFlashAttribute("errorMessage", "Vui l√≤ng ch·ªçn shipper khi giao l·∫°i.");
				return "redirect:/seller/orders/" + maDonHang;
			}

			NguoiDung shipperMoi = nguoiDungService.findById(shipperId);
			if (shipperMoi == null) {
				redirectAttributes.addFlashAttribute("errorMessage", "Shipper kh√¥ng h·ª£p l·ªá.");
				return "redirect:/seller/orders/" + maDonHang;
			}

			NguoiDung shipperCu = donHang.getShipper();
			donHang.setShipper(shipperMoi);
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
			donHang.setTrangThaiChoXacNhan("Ch·ªù shipper x√°c nh·∫≠n l·∫°i");
			donHang.setSoLanGiaoThatBai(donHang.getSoLanGiaoThatBai() + 1);

			if (shipperCu != null && !shipperCu.equals(shipperMoi)) {
				String lichSu = donHang.getLichSuTrangThai() != null ? donHang.getLichSuTrangThai() : "";
				String thoiGian = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
				lichSu += " " + thoiGian + " - ƒê∆°n h√†ng ƒë∆∞·ª£c b√†n giao t·ª´ " + shipperCu.getTenNguoiDung()
						+ " sang shipper " + shipperMoi.getTenNguoiDung();
				donHang.setLichSuTrangThai(lichSu);
			}

			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage",
					"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao l·∫°i cho " + shipperMoi.getTenNguoiDung());
			return "redirect:/seller/orders/" + maDonHang;
		}

		redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
		return "redirect:/seller/orders/" + maDonHang;
	}

	@PostMapping("/order/update")
	public String updateOrderFromSeller(@ModelAttribute("donHang") DonHang donHang, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
		model.addAttribute("user", userDetails);

		try {
			donHangService.updateDonHang(donHang);
			return "redirect:/seller/orders/" + donHang.getMaDonHang();
		} catch (RuntimeException e) {
			model.addAttribute("errorMessage", e.getMessage());
			return "seller/order/view";
		}
	}

	@PostMapping("/orders/{maDonHang}/confirm-status")
	public String confirmShipperStatusFromSeller(@PathVariable("maDonHang") Integer maDonHang,
			RedirectAttributes redirectAttributes) {

		DonHang donHang = donHangService.getDonHangById(maDonHang);
		if (donHang == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/seller/orders";
		}

		if ("Ch·ªù x√°c nh·∫≠n".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒêang x·ª≠ l√Ω");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang x·ª≠ l√Ω'.");
			return "redirect:/seller/orders";
		}

		if ("ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
			donHang.setTrangThaiDonHang("ƒê√£ x√°c nh·∫≠n");
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		String trangThaiMoi = donHang.getTrangThaiChoXacNhan();
		if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		if ("Giao l·∫°i ƒë∆°n h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n giao l·∫°i.");
		} else if ("ƒêang giao h√†ng".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang giao h√†ng");
			donHangService.capNhatTrangThai(donHang, "ƒêang giao h√†ng");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n tr·∫°ng th√°i 'ƒêang giao h√†ng'.");
		} else if ("ƒê√£ ho√†n th√†nh".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒê√£ ho√†n th√†nh");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.");
		} else if (trangThaiMoi.startsWith("Giao h√†ng th·∫•t b·∫°i")) {
			int soLanGiaoThatBai = donHang.getSoLanGiaoThatBai() != null ? donHang.getSoLanGiaoThatBai() : 0;
			soLanGiaoThatBai++;
			donHang.setSoLanGiaoThatBai(soLanGiaoThatBai);

			if (soLanGiaoThatBai >= 2) {
				donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
				donHang.setTrangThaiChoXacNhan(null);
				redirectAttributes.addFlashAttribute("errorMessage", "ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i 2 l·∫ßn v√† b·ªã h·ªßy.");
			} else {
				donHang.setTrangThaiDonHang("Ch·ªù shipper x√°c nh·∫≠n l·∫°i");
				donHang.setTrangThaiChoXacNhan("Giao l·∫°i ƒë∆°n h√†ng");
				redirectAttributes.addFlashAttribute("successMessage",
						"ƒê∆°n h√†ng ƒëang ch·ªù shipper nh·∫≠n l·∫°i l·∫ßn " + soLanGiaoThatBai);
			}

			donHangService.updateDonHang(donHang);
		} else if ("Ch·ªù shipper x√°c nh·∫≠n l·∫°i".equals(trangThaiMoi)) {
			donHang.setTrangThaiDonHang("ƒêang chu·∫©n b·ªã h√†ng");
			donHang.setTrangThaiChoXacNhan(null);
			donHangService.updateDonHang(donHang);
			redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao l·∫°i cho shipper.");
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
		}
		// String trangThaiMoi = donHang.getTrangThaiChoXacNhan();
		System.out.println("üöö Tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n ti·∫øp theo t·ª´ shipper: " + trangThaiMoi);

		if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn x√°c nh·∫≠n.");
			return "redirect:/seller/orders/" + maDonHang;
		}

		return "redirect:/seller/orders/" + maDonHang;
	}

	@ModelAttribute("getNextStatuses")
	public List<String> getNextStatuses(String currentStatus, boolean isShipperConfirmed, Integer soLanGiaoThatBai) {
		if (currentStatus == null || currentStatus.isEmpty()) {
			return Collections.emptyList();
		}

		List<String> nextStatuses = new ArrayList<>();

		switch (currentStatus) {
		case "ƒêang x·ª≠ l√Ω":
			nextStatuses.add("ƒê√£ x√°c nh·∫≠n");
			nextStatuses.add("ƒê√£ h·ªßy");
			break;
		case "ƒê√£ x√°c nh·∫≠n":
			nextStatuses.add("ƒêang chu·∫©n b·ªã h√†ng");
			break;
		case "ƒêang chu·∫©n b·ªã h√†ng":
			nextStatuses.add("ƒêang giao h√†ng");
			break;
		case "ƒêang giao h√†ng":
			if (isShipperConfirmed) {
				nextStatuses.add("ƒê√£ ho√†n th√†nh");
			} else {
				nextStatuses.add("Ch·ªù x√°c nh·∫≠n t·ª´ shipper");
			}
			break;
		case "Giao th·∫•t b·∫°i":
			if (soLanGiaoThatBai < 2) {
				nextStatuses.add("ƒêang giao l·∫°i l·∫ßn " + (soLanGiaoThatBai + 1));
			} else {
				nextStatuses.add("H·ªßy ƒë∆°n h√†ng");
			}
			break;
		case "ƒê√£ ho√†n th√†nh":
		case "ƒê√£ h·ªßy":
			break;
		}

		System.out.println(" nextStatuses: " + nextStatuses);
		return nextStatuses;
	}

	@GetMapping("/offline-orders")
	public String showOfflineOrderFormForSeller(
			@RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
			@RequestParam(value = "size", defaultValue = "5") int size,
			@RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(value = "selectedProductIds", required = false) String selectedProductIdsStr,
			@RequestParam(value = "selectedQuantities", required = false) String selectedQuantitiesStr,
			HttpServletRequest request, Model model) {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof NguoiDungDetails) {
			NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
			model.addAttribute("user", userDetails);
		} else {
			model.addAttribute("user", null);
		}

		model.addAttribute("requestUri", request.getRequestURI());

		List<Integer> selectedProductIds = new ArrayList<>();
		List<Integer> selectedQuantities = new ArrayList<>();

		if (selectedProductIdsStr != null && !selectedProductIdsStr.isEmpty()) {
			selectedProductIds = Arrays.stream(selectedProductIdsStr.split(",")).map(Integer::parseInt)
					.collect(Collectors.toList());
		}

		if (selectedQuantitiesStr != null && !selectedQuantitiesStr.isEmpty()) {
			selectedQuantities = Arrays.stream(selectedQuantitiesStr.split(",")).map(q -> {
				String[] parts = q.split(":");
				return parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
			}).collect(Collectors.toList());
		}

		Page<SanPham> sanPhamPage;
		if (keyword != null && !keyword.isEmpty()) {
			sanPhamPage = sanPhamService.searchActiveByName(keyword, PageRequest.of(page, size));
		} else {
			sanPhamPage = sanPhamService.findAllActiveWithStock(PageRequest.of(page, size));
		}

		if (sanPhamPage.isEmpty()) {
			model.addAttribute("noProductsMessage", "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.");
		}

		LocalDate today = LocalDate.now();
		Map<Integer, String> formattedPrices = new HashMap<>();
		Map<Integer, String> formattedDiscountPrices = new HashMap<>();
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");

		for (SanPham sp : sanPhamPage.getContent()) {
			BigDecimal giaGoc = sp.getDonGiaBan();
			formattedPrices.put(sp.getMaSanPham(), decimalFormat.format(giaGoc) + " VND");

			Optional<KhuyenMai> highestKhuyenMai = sp.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
					.filter(km -> km.getNgayBatDau() != null && km.getNgayKetThuc() != null
							&& !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			if (highestKhuyenMai.isPresent() && highestKhuyenMai.get().getPhanTramGiamGia() != null) {
				BigDecimal phanTramGiam = highestKhuyenMai.get().getPhanTramGiamGia();
				BigDecimal giaSauGiam = giaGoc.subtract(giaGoc.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));

				formattedDiscountPrices.put(sp.getMaSanPham(),
						"<del style='color:grey; font-size:14px;'>" + decimalFormat.format(giaGoc) + " VND</del> "
								+ "<span class='text-danger fw-bold'>" + decimalFormat.format(giaSauGiam)
								+ " VND</span>");
			} else {
				formattedDiscountPrices.put(sp.getMaSanPham(), decimalFormat.format(giaGoc) + " VND");
			}
		}

		model.addAttribute("selectedProductIds", selectedProductIds);
		model.addAttribute("selectedQuantities", selectedQuantities);
		model.addAttribute("sanPhamList", sanPhamPage.getContent());
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", sanPhamPage.getTotalPages());
		model.addAttribute("formattedDiscountPrices", formattedDiscountPrices);

		return "seller/order/offline-order";
	}

	@GetMapping("/offline-orders/confirm")
	public String confirmOfflineOrderForSeller(Model model,
			@RequestParam(value = "soDienThoai", required = false) String soDienThoai) {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof NguoiDungDetails) {
			NguoiDungDetails userDetails = (NguoiDungDetails) authentication.getPrincipal();
			model.addAttribute("user", userDetails);
		}

		List<ChiTietDonHang> orderItems = donHangService.getCurrentOfflineOrder();

		if (orderItems.isEmpty()) {
			model.addAttribute("orderItems", Collections.emptyList());
			model.addAttribute("totalPrice", "0 VND");
			return "seller/order/offline-order-confirm";
		}

		LocalDate today = LocalDate.now();
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");

		BigDecimal totalPrice = BigDecimal.ZERO;
		Map<Integer, String> formattedDiscountPrices = new HashMap<>();

		for (ChiTietDonHang chiTiet : orderItems) {
			SanPham sp = chiTiet.getSanPham();

			// Load l·∫°i danh s√°ch khuy·∫øn m√£i m·ªõi nh·∫•t
			sp.setKhuyenMais(new HashSet<>(
					sanPhamRepository.findByIdInWithKhuyenMai(List.of(sp.getMaSanPham())).get(0).getKhuyenMais()));

			Optional<KhuyenMai> highestKhuyenMai = sp.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			BigDecimal giaSauGiam = sp.getDonGiaBan();
			if (highestKhuyenMai.isPresent()) {
				BigDecimal phanTramGiam = highestKhuyenMai.get().getPhanTramGiamGia();
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
			}

			formattedDiscountPrices.put(sp.getMaSanPham(), decimalFormat.format(giaSauGiam) + " VND");
			totalPrice = totalPrice.add(giaSauGiam.multiply(BigDecimal.valueOf(chiTiet.getSoLuong())));
		}

		NguoiDung khachHang = nguoiDungRepository.findBySoDienThoai(soDienThoai).orElse(null);
		if (khachHang != null) {
			model.addAttribute("tenKhachHang", khachHang.getHoTen());
			model.addAttribute("soDienThoai", khachHang.getSoDienThoai());
		} else {
			model.addAttribute("tenKhachHang", "Kh√°ch v√£ng lai");
			model.addAttribute("soDienThoai", "0000000000");
		}

		model.addAttribute("diaChiGiaoHang", "Mua t·∫°i qu·∫ßy KN");
		model.addAttribute("orderItems", orderItems);
		model.addAttribute("totalPrice", decimalFormat.format(totalPrice) + " VND");
		model.addAttribute("formattedDiscountPrices", formattedDiscountPrices);

		return "seller/order/offline-order-confirm";
	}

	@PostMapping("/offline-orders/remove")
	public String removeFromOfflineOrderForSeller(@RequestParam("sanPhamId") Integer sanPhamId,
			RedirectAttributes redirectAttributes) {
		donHangService.removeFromOfflineOrder(sanPhamId);
		redirectAttributes.addFlashAttribute("successMessage", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ƒë∆°n h√†ng!");
		return "redirect:/seller/offline-orders/confirm";
	}

	@PostMapping("/offline-orders/checkout")
	public String checkoutOfflineOrderForSeller(RedirectAttributes redirectAttributes,
			@RequestParam(value = "soDienThoai", required = false) String soDienThoai) {
		System.out.println("üîµ S·ªë ƒëi·ªán tho·∫°i nh·∫≠n ƒë∆∞·ª£c khi checkout (SELLER): " + soDienThoai);

		if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
			soDienThoai = "0000000000"; // Kh√°ch v√£ng lai
		}

		boolean isConfirmed = donHangService.processAndGenerateInvoiceForOfflineOrder(soDienThoai);

		if (isConfirmed) {
			redirectAttributes.addFlashAttribute("successMessage", "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
			return "redirect:/seller/orders";
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.");
			return "redirect:/seller/offline-orders/confirm";
		}
	}

	@PostMapping("/offline-orders/check-phone")
	public String checkPhoneForSeller(@RequestParam(value = "soDienThoai", required = false) String soDienThoai,
			RedirectAttributes redirectAttributes) {
		System.out.println("üìû [SELLER] Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i: " + soDienThoai);

		if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage",
					"Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu l√† kh√°ch v√£ng lai.");
			return "redirect:/seller/offline-orders/confirm";
		}

		Optional<NguoiDung> optionalKhachHang = nguoiDungRepository.findBySoDienThoai(soDienThoai);
		if (optionalKhachHang.isPresent()) {
			NguoiDung khachHang = optionalKhachHang.get();
			redirectAttributes.addAttribute("tenKhachHang", khachHang.getHoTen());
			redirectAttributes.addAttribute("soDienThoai", khachHang.getSoDienThoai());
			System.out.println("‚úÖ [SELLER] T√¨m th·∫•y kh√°ch h√†ng: " + khachHang.getTenNguoiDung());
		} else {
			redirectAttributes.addAttribute("tenKhachHang", "Kh√°ch v√£ng lai");
			redirectAttributes.addAttribute("soDienThoai", "0000000000");
			redirectAttributes.addFlashAttribute("errorMessage",
					"Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng. Ti·∫øp t·ª•c v·ªõi kh√°ch v√£ng lai.");
			System.out.println("‚ùå [SELLER] Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng -> Kh√°ch v√£ng lai");
		}

		return "redirect:/seller/offline-orders/confirm";
	}

	@PostMapping("/offline-orders/add")
	public String addProductToOrderForSeller(@RequestParam("sanPhamId") Integer sanPhamId,
			@RequestParam("soLuong") Integer soLuong, RedirectAttributes redirectAttributes) {

		Optional<SanPham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
		if (optionalSanPham.isPresent()) {
			donHangService.addToOfflineOrder(optionalSanPham.get(), soLuong);
			redirectAttributes.addFlashAttribute("successMessage", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o ƒë∆°n h√†ng!");
		} else {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
		}

		return "redirect:/seller/offline-orders"; // Gi·ªØ nguy√™n trang seller
	}

}