package com.kimngan.ComesticAdmin.controller.customer;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.springframework.ui.Model;
import org.springframework.security.core.Authentication;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.kimngan.ComesticAdmin.entity.DanhGia;
import com.kimngan.ComesticAdmin.entity.DanhMuc;
import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.NguoiDungDetails;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.services.DanhGiaService;
import com.kimngan.ComesticAdmin.services.DanhMucService;
import com.kimngan.ComesticAdmin.services.SanPhamService;
import com.kimngan.ComesticAdmin.services.YeuThichService;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import java.time.LocalDate;

@Controller
@RequestMapping("/category")
public class CustomerCategoryController {

	@Autowired
	private SanPhamService sanPhamService;
	@Autowired
	private DanhGiaService danhGiaService;

	@Autowired
	private DanhMucService danhMucService;
	@Autowired
	private YeuThichService yeuThichService;

	@GetMapping({ "/{maDanhMuc}", "/all", "/", "" })
	public String productsByCategoryOrAll(@PathVariable(value = "maDanhMuc", required = false) Integer maDanhMuc,
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(value = "sortOrder", defaultValue = "asc") String sortOrder,
			@RequestParam(value = "minPrice", required = false) BigDecimal minPrice,
			@RequestParam(value = "maxPrice", required = false) BigDecimal maxPrice, Model model,
			Authentication authentication) {

		// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i n·∫øu ƒëƒÉng nh·∫≠p
		NguoiDung currentUser = null;
		if (authentication != null && authentication.isAuthenticated()) {
			Object principal = authentication.getPrincipal();
			if (principal instanceof NguoiDungDetails) {
				NguoiDungDetails userDetails = (NguoiDungDetails) principal;
				currentUser = userDetails.getNguoiDung();
				System.out.println("Current user: " + currentUser.getTenNguoiDung());
			}
		}
		if (currentUser != null) {
			model.addAttribute("currentUser", currentUser);
		}
		model.addAttribute("timestamp", System.currentTimeMillis()); // Th√™m timestamp v√†o Model

		// N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch
		Set<Integer> favoriteProductIds = new HashSet<>();
		if (currentUser != null) {
			favoriteProductIds = yeuThichService.getFavoriteProductIdsForUser(currentUser);
			System.out.println("favoriteProductIds: " + favoriteProductIds);
		}

		Page<SanPham> products;
		String selectedCategoryName;
		 // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho kho·∫£ng gi√°
	    if (minPrice == null) minPrice = BigDecimal.ZERO;
	    if (maxPrice == null) maxPrice = new BigDecimal("999999999");

//		if (maDanhMuc == null) {
//			// Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông
//			products = sanPhamService.findAllActive(PageRequest.of(page, 15));
//			selectedCategoryName = "T·∫•t c·∫£";
//		} else {
//			// Hi·ªÉn th·ªã s·∫£n ph·∫©m theo danh m·ª•c ƒë√£ ch·ªçn
//			products = sanPhamService.findActiveProductsInOrderDetailsByCategory(maDanhMuc, PageRequest.of(page, 15));
//			DanhMuc selectedCategory = danhMucService.findById(maDanhMuc);
//			selectedCategoryName = selectedCategory != null ? selectedCategory.getTenDanhMuc()
//					: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i";
//		}

	    if (maDanhMuc == null) {
	        products = sanPhamService.findAllActiveByPriceRange(minPrice, maxPrice, PageRequest.of(page, 15));
	        selectedCategoryName = "T·∫•t c·∫£";
	    } else {
	        products = sanPhamService.findActiveProductsByCategoryAndPrice(maDanhMuc, minPrice, maxPrice, PageRequest.of(page, 15));
	        DanhMuc selectedCategory = danhMucService.findById(maDanhMuc);
	        selectedCategoryName = selectedCategory != null ? selectedCategory.getTenDanhMuc() : "Danh m·ª•c kh√¥ng t·ªìn t·∫°i";
	    }

		Map<Integer, KhuyenMai> sanPhamKhuyenMaiMap = new HashMap<>();
		Map<Integer, BigDecimal> sanPhamGiaSauGiamMap = new HashMap<>();
		Map<Integer, Double> sanPhamAverageRatingMap = new HashMap<>();
		Map<Integer, String> sanPhamThuongHieuMap = new HashMap<>();
		
		LocalDate today = LocalDate.now();

		// T√≠nh to√°n gi√° sau gi·∫£m v√† l∆∞u v√†o map
		for (SanPham sanPham : products.getContent()) {
			Optional<KhuyenMai> highestCurrentKhuyenMai = sanPham.getKhuyenMais().stream()
					.filter(km -> km.getTrangThai())
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			BigDecimal giaSauGiam = sanPham.getDonGiaBan();
			if (highestCurrentKhuyenMai.isPresent()) {
				BigDecimal phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
				sanPhamKhuyenMaiMap.put(sanPham.getMaSanPham(), highestCurrentKhuyenMai.get());
			}
			sanPhamGiaSauGiamMap.put(sanPham.getMaSanPham(), giaSauGiam);

			// L·∫•y danh s√°ch ƒë√°nh gi√° s·∫£n ph·∫©m v√† t√≠nh trung b√¨nh s·ªë sao
			List<DanhGia> danhGias = danhGiaService.findBySanPham(sanPham);
			Double averageRating = danhGias.stream().mapToInt(DanhGia::getSoSao).average().orElse(0.0);
			sanPhamAverageRatingMap.put(sanPham.getMaSanPham(), averageRating);
			 // üîπ **Th√™m logic l·∫•y th∆∞∆°ng hi·ªáu s·∫£n ph·∫©m**
		    if (sanPham.getThuongHieu() != null) { 
		        sanPhamThuongHieuMap.put(sanPham.getMaSanPham(), sanPham.getThuongHieu().getTenThuongHieu());
		    } else {
		        sanPhamThuongHieuMap.put(sanPham.getMaSanPham(), "Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu");
		    }
		}

		// Chuy·ªÉn ƒë·ªïi Page<SanPham> sang List<SanPham> v√† th·ª±c hi·ªán s·∫Øp x·∫øp
		List<SanPham> sortedProducts = new ArrayList<>(products.getContent());
		sortedProducts.sort((p1, p2) -> {
			BigDecimal giaSauGiam1 = sanPhamGiaSauGiamMap.getOrDefault(p1.getMaSanPham(), p1.getDonGiaBan());
			BigDecimal giaSauGiam2 = sanPhamGiaSauGiamMap.getOrDefault(p2.getMaSanPham(), p2.getDonGiaBan());
			return sortOrder.equals("asc") ? giaSauGiam1.compareTo(giaSauGiam2) : giaSauGiam2.compareTo(giaSauGiam1);
		});

		// In ra ƒë·ªÉ ki·ªÉm tra s·∫Øp x·∫øp
		System.out.println("Sorted Products:");
		sortedProducts.forEach(
				sp -> System.out.println(sp.getMaSanPham() + " - " + sanPhamGiaSauGiamMap.get(sp.getMaSanPham())));

		// Ph√¢n trang danh s√°ch ƒë√£ s·∫Øp x·∫øp
		int pageSize = 15;
		int start = Math.min(page * pageSize, sortedProducts.size());
		int end = Math.min((page + 1) * pageSize, sortedProducts.size());
		List<SanPham> paginatedProducts = sortedProducts.subList(start, end);

		// Th√™m d·ªØ li·ªáu v√†o model
		model.addAttribute("sanPhams", paginatedProducts);
		model.addAttribute("maDanhMuc", maDanhMuc);
		model.addAttribute("selectedCategory", selectedCategoryName);
		model.addAttribute("categories", danhMucService.getAll());
		model.addAttribute("sanPhamKhuyenMaiMap", sanPhamKhuyenMaiMap);
		model.addAttribute("sanPhamGiaSauGiamMap", sanPhamGiaSauGiamMap);
		model.addAttribute("sortOrder", sortOrder); // ƒê·ªÉ gi·ªØ gi√° tr·ªã s·∫Øp x·∫øp hi·ªán t·∫°i tr√™n giao di·ªán
		model.addAttribute("favoriteProductIds", favoriteProductIds);
		model.addAttribute("sanPhamAverageRatingMap", sanPhamAverageRatingMap);
	    model.addAttribute("minPrice", minPrice);
	    model.addAttribute("maxPrice", maxPrice);
	    model.addAttribute("sanPhamThuongHieuMap", sanPhamThuongHieuMap);


		return "customer/categoryProduct";
	}

	@GetMapping("/search")
	public String searchProducts(@RequestParam(value = "category", required = false) Integer category,
			@RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(defaultValue = "0") int page, Model model, Authentication authentication) {

		NguoiDung currentUser = null;
		if (authentication != null && authentication.isAuthenticated()) {
			Object principal = authentication.getPrincipal();
			if (principal instanceof NguoiDungDetails) {
				// √âp ki·ªÉu principal th√†nh NguoiDungDetails v√† l·∫•y NguoiDung
				NguoiDungDetails userDetails = (NguoiDungDetails) principal;
				currentUser = userDetails.getNguoiDung();
				System.out.println("Current user: " + currentUser.getTenNguoiDung());
			}
		}
		if (currentUser != null) {
			model.addAttribute("currentUser", currentUser);
		}
		model.addAttribute("timestamp", System.currentTimeMillis()); // Th√™m timestamp v√†o Model

		// N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch
		Set<Integer> favoriteProductIds = new HashSet<>();
		if (currentUser != null) {
			favoriteProductIds = yeuThichService.getFavoriteProductIdsForUser(currentUser);
			System.out.println("favoriteProductIds: " + favoriteProductIds);
		}

		model.addAttribute("favoriteProductIds", favoriteProductIds);

		Page<SanPham> searchResults;
		if (category == null || category == -1) {
			// T√¨m ki·∫øm trong t·∫•t c·∫£ danh m·ª•c
			searchResults = sanPhamService.searchAllActiveProductsWithOrderDetails(keyword, PageRequest.of(page, 15));
			model.addAttribute("selectedCategory", "T·∫•t c·∫£");
		} else {
			// T√¨m ki·∫øm theo m√£ danh m·ª•c c·ª• th·ªÉ
			searchResults = sanPhamService.searchByCategoryWithOrderDetails(category, keyword,
					PageRequest.of(page, 15));

			// Ki·ªÉm tra n·∫øu danh m·ª•c kh√¥ng t·ªìn t·∫°i
			DanhMuc selectedDanhMuc = danhMucService.findById(category);
			if (selectedDanhMuc != null) {
				model.addAttribute("selectedCategory", selectedDanhMuc.getTenDanhMuc());
			} else {
				model.addAttribute("selectedCategory", "Kh√¥ng x√°c ƒë·ªãnh"); // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu danh m·ª•c kh√¥ng t·ªìn t·∫°i
			}
		}

		// Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong k·∫øt qu·∫£ t√¨m ki·∫øm
		if (searchResults.isEmpty()) {
			model.addAttribute("noResultsMessage", "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c t√¨m th·∫•y.");
		} else {
			model.addAttribute("sanPhams", searchResults.getContent());
			model.addAttribute("currentPage", page);
			model.addAttribute("totalPages", searchResults.getTotalPages());
		}

		// Kh·ªüi t·∫°o c√°c map cho khuy·∫øn m√£i v√† gi√° sau gi·∫£m gi√°
		Map<Integer, KhuyenMai> sanPhamKhuyenMaiMap = new HashMap<>();
		Map<Integer, BigDecimal> sanPhamGiaSauGiamMap = new HashMap<>();
		Map<Integer, Double> sanPhamAverageRatingMap = new HashMap<>();

		LocalDate today = LocalDate.now();

		for (SanPham sanPham : searchResults) {
			Optional<KhuyenMai> highestCurrentKhuyenMai = sanPham.getKhuyenMais().stream()
					.filter(km -> km.getTrangThai())
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			BigDecimal giaSauGiam = sanPham.getDonGiaBan();
			if (highestCurrentKhuyenMai.isPresent()) {
				BigDecimal phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
				sanPhamKhuyenMaiMap.put(sanPham.getMaSanPham(), highestCurrentKhuyenMai.get());
			}
			sanPhamGiaSauGiamMap.put(sanPham.getMaSanPham(), giaSauGiam);
			// L·∫•y danh s√°ch ƒë√°nh gi√° s·∫£n ph·∫©m v√† t√≠nh trung b√¨nh s·ªë sao
			List<DanhGia> danhGias = danhGiaService.findBySanPham(sanPham);
			Double averageRating = danhGias.stream().mapToInt(DanhGia::getSoSao).average().orElse(0.0);
			sanPhamAverageRatingMap.put(sanPham.getMaSanPham(), averageRating);
		}

		// L·∫•y danh s√°ch danh m·ª•c v√† th√™m v√†o model
		List<DanhMuc> categories = danhMucService.getAll();
		model.addAttribute("categories", categories);
		model.addAttribute("category", category);
		model.addAttribute("keyword", keyword);
		model.addAttribute("sanPhamKhuyenMaiMap", sanPhamKhuyenMaiMap);
		model.addAttribute("sanPhamGiaSauGiamMap", sanPhamGiaSauGiamMap);
		model.addAttribute("sanPhamAverageRatingMap", sanPhamAverageRatingMap);

		return "customer/categoryProduct";
	}

}
