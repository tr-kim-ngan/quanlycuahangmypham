package com.kimngan.ComesticAdmin.controller.customer;

import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.ChiTietDonHangId;
import com.kimngan.ComesticAdmin.entity.ChiTietGioHang;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.repository.SanPhamRepository;
import com.kimngan.ComesticAdmin.services.ChiTietDonHangService;
import com.kimngan.ComesticAdmin.services.ChiTietDonNhapHangService;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.GioHangService;
import com.kimngan.ComesticAdmin.services.KiemKeKhoService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.SanPhamService;
import com.kimngan.ComesticAdmin.services.ShippingFeeConfigService;
import com.kimngan.ComesticAdmin.services.VNPayService;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import java.math.BigDecimal;
import java.security.Principal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.Map;

@Controller
@RequestMapping("/customer/order")
public class DonHangController {

	@Autowired
	private DonHangService donHangService;

	@Autowired
	private GioHangService gioHangService;

	@Autowired
	private ChiTietDonHangService chiTietDonHangService;
	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private SanPhamService sanPhamService;

	@Autowired
	private VNPayService vnpayService;

	@Autowired
	private ShippingFeeConfigService shippingFeeConfigService;

	@Autowired
	private ChiTietDonNhapHangService chiTietDonNhapHangService;
	@Autowired
	private SanPhamRepository sanPhamRepository;
	@Autowired
	private KiemKeKhoService kiemKeKhoService;

	@ModelAttribute
	public void addAttributes(Model model, Principal principal) {
		if (principal != null) {
			// L·∫•y t√™n ƒëƒÉng nh·∫≠p t·ª´ Principal
			String username = principal.getName();

			// T√¨m th√¥ng tin ng∆∞·ªùi d√πng
			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(username);

			// Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√† timestamp v√†o Model
			model.addAttribute("currentUser", currentUser);
			model.addAttribute("timestamp", System.currentTimeMillis()); // Timestamp lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
		}
	}

	@GetMapping("/confirm")
	public String confirmOrder(@RequestParam("orderId") Integer orderId, Model model, Principal principal) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		// Debug ki·ªÉm tra orderId
		System.out.println(" Debug confirmOrder - Order ID nh·∫≠n v√†o: " + orderId);

		DonHang donHang = donHangService.getDonHangById(orderId);

		// Debug ki·ªÉm tra donHang
		System.out.println(" Debug confirmOrder - DonHang t·ª´ DB: " + donHang);

		if (donHang == null) {
			model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
			return "redirect:/customer/order";
		}

		// Th√™m donHang v√†o model ƒë·ªÉ Thymeleaf c√≥ th·ªÉ s·ª≠ d·ª•ng
		model.addAttribute("donHang", donHang);

		return "customer/confirmOrder"; // Tr·∫£ v·ªÅ giao di·ªán x√°c nh·∫≠n ƒë∆°n h√†ng
	}

	@GetMapping
	public String viewOrders(
			   @RequestParam(value = "status", required = false, defaultValue = "all") String status,
			    @RequestParam(value = "type", required = false, defaultValue = "all") String type,
			    @RequestParam(value = "page", defaultValue = "0") int page,
			    Principal principal,
			    Model model) {
		  int size = 8;
		if (page < 0) {
			page = 0; // ƒê·∫£m b·∫£o kh√¥ng ƒë·ªÉ s·ªë √¢m g√¢y l·ªói
		}

		if (principal == null) {
			return "redirect:/customer/login";
		}

		String username = principal.getName();
		PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "ngayDat"));

		Page<DonHang> donHangPage;
		if ("all".equals(status)) {
			// X·ª≠ l√Ω theo lo·∫°i ƒë∆°n h√†ng
			if ("store".equals(type)) {
				donHangPage = donHangService.getOrdersByUserAndDiaChi(username, "Mua t·∫°i qu·∫ßy KN", pageRequest);
			} else if ("online".equals(type)) {
				donHangPage = donHangService.getOrdersByUserAndDiaChiNot(username, "Mua t·∫°i qu·∫ßy KN", pageRequest);
			} else {
				donHangPage = donHangService.getOrdersByUser(username, pageRequest);
			}
		} else if ("M·ªõi ƒë·∫∑t".equals(status)) {
			donHangPage = donHangService.getLatestOrdersByUser(username, pageRequest);
		} else {
			donHangPage = donHangService.getOrdersByUserAndStatus(username, status, pageRequest);
		}

		model.addAttribute("donHangs", donHangPage.getContent());
		model.addAttribute("currentPage", donHangPage.getNumber());
		model.addAttribute("totalPages", donHangPage.getTotalPages());
		model.addAttribute("selectedType", type);
		model.addAttribute("selectedStatus", status);
		model.addAttribute("size", size);

		return "customer/order";
	}

	
	
	
	// Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng
	@GetMapping("/{maDonHang}")
	public String viewOrderDetail(@PathVariable Integer maDonHang, Model model) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		// T√≠nh gi√° tr·ªã th√†nh ti·ªÅn cho t·ª´ng s·∫£n ph·∫©m trong ƒë∆°n h√†ng
		Map<ChiTietDonHang, BigDecimal> thanhTienMap = new HashMap<>();
		BigDecimal tongGiaTriSanPham = BigDecimal.ZERO;
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
			BigDecimal giaSauKhuyenMai = chiTiet.getGiaTaiThoiDiemDat(); // L·∫•y gi√° t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t t·ª´ chi ti·∫øt ƒë∆°n
																			// h√†ng

			// T√≠nh th√†nh ti·ªÅn cho s·∫£n ph·∫©m n√†y
			BigDecimal thanhTien = giaSauKhuyenMai.multiply(BigDecimal.valueOf(chiTiet.getSoLuong()));
			thanhTienMap.put(chiTiet, thanhTien);
			tongGiaTriSanPham = tongGiaTriSanPham.add(thanhTien);
		}
		// L·∫•y ph√≠ v·∫≠n chuy·ªÉn t·ª´ ƒë∆°n h√†ng
		BigDecimal phiVanChuyen = donHang.getPhiVanChuyen();

		// T√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng
		BigDecimal tongGiaTriDonHang = tongGiaTriSanPham.add(phiVanChuyen);
		System.out.println("üí∞ T·ªïng gi√° tr·ªã s·∫£n ph·∫©m: " + tongGiaTriSanPham);
		System.out.println("üöö Ph√≠ v·∫≠n chuy·ªÉn: " + phiVanChuyen);
		System.out.println("üõí T·ªïng gi√° tr·ªã ƒë∆°n h√†ng: " + tongGiaTriDonHang);
		// ƒê∆∞a `thanhTienMap` v√†o model ƒë·ªÉ s·ª≠ d·ª•ng trong view
		model.addAttribute("donHang", donHang);
		model.addAttribute("thanhTienMap", thanhTienMap);
		model.addAttribute("tongGiaTriSanPham", tongGiaTriSanPham);
		model.addAttribute("phiVanChuyen", phiVanChuyen);
		model.addAttribute("tongGiaTriDonHang", tongGiaTriDonHang);

		return "customer/order_detail"; // Tr·∫£ v·ªÅ trang order_detail.html
	}
	// Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng

//	@PostMapping("/create")
//	public String createOrder(Principal principal, @RequestParam("address") String address,
//			@RequestParam("phone") String phone, @RequestParam("phuongThucThanhToan") String phuongThucThanhToan,
//			HttpServletRequest request, RedirectAttributes redirectAttributes, Model model) {
//
//		System.out.println(" Debug: B·∫ÆT ƒê·∫¶U X·ª¨ L√ù T·∫†O ƒê∆†N H√ÄNG");
//		if (principal == null) {
//			return "redirect:/customer/login";
//		}
//
//		try {
//			String username = principal.getName();
//			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(username);
//			List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);
//			LocalDate today = LocalDate.now();
//
//			// Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
//			if (cartItems.isEmpty()) {
//				model.addAttribute("errorMessage", "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.");
//				return "redirect:/customer/cart";
//			}
//			// Debug ki·ªÉm tra tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng
//			System.out.println(" Debug: B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng");
//
//			// T·∫°o ƒë·ªëi t∆∞·ª£ng DonHang v√† thi·∫øt l·∫≠p c√°c th√¥ng tin ban ƒë·∫ßu
//			DonHang donHang = new DonHang();
//			donHang.setNguoiDung(currentUser);
//			donHang.setDiaChiGiaoHang(address);
//			donHang.setSdtNhanHang(phone);
//			donHang.setNgayDat(LocalDateTime.now());
//			// donHang.setTrangThaiDonHang("ƒêang x·ª≠ l√Ω");
//
//			// Ki·ªÉm tra kh√°ch h√†ng ch·ªçn ph∆∞∆°ng th·ª©c n√†o
//			if ("COD".equals(phuongThucThanhToan)) {
//				donHang.setTrangThaiDonHang("ƒêang x·ª≠ l√Ω"); // Tr·∫°ng th√°i x·ª≠ l√Ω ngay khi ƒë·∫∑t h√†ng
//			} else if ("VNPay".equals(phuongThucThanhToan)) {
//				donHang.setTrangThaiDonHang("Ch·ªù thanh to√°n"); // Ch·ªù kh√°ch h√†ng thanh to√°n online
//			} else {
//				redirectAttributes.addFlashAttribute("errorMessage", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.");
//				return "redirect:/customer/order";
//			}
//
//			BigDecimal tongGiaTriDonHang = BigDecimal.ZERO;
//			// BigDecimal phiVanChuyen = BigDecimal.valueOf(0); // Gi√° tr·ªã ph√≠ v·∫≠n chuy·ªÉn
//			// m·∫∑c ƒë·ªãnh
//
//			// Duy·ªát qua c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng tr∆∞·ªõc
//			for (ChiTietGioHang cartItem : cartItems) {
//				// T√≠nh gi√° t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t (bao g·ªìm khuy·∫øn m√£i n·∫øu c√≥)
//				BigDecimal giaTaiThoiDiemDat = cartItem.getSanPham().getDonGiaBan();
//				Optional<KhuyenMai> highestCurrentKhuyenMai = cartItem.getSanPham().getKhuyenMais().stream()
//						.filter(KhuyenMai::getTrangThai)
//						.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
//								&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
//						.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));
//
//				if (highestCurrentKhuyenMai.isPresent()) {
//					BigDecimal phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
//					giaTaiThoiDiemDat = giaTaiThoiDiemDat
//							.subtract(giaTaiThoiDiemDat.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
//				}
//
//				// T√≠nh th√†nh ti·ªÅn cho s·∫£n ph·∫©m n√†y v√† c·ªông v√†o t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
//				BigDecimal thanhTien = giaTaiThoiDiemDat.multiply(BigDecimal.valueOf(cartItem.getSoLuong()));
//				tongGiaTriDonHang = tongGiaTriDonHang.add(thanhTien);
//			}
//
//			// **T√≠nh ph√≠ v·∫≠n chuy·ªÉn t·ª´ b·∫£ng c·∫•u h√¨nh**
//			BigDecimal phiVanChuyen = shippingFeeConfigService.getShippingFeeForOrder(tongGiaTriDonHang);
//
//			// ƒê·∫∑t t·ªïng gi√° tr·ªã ƒë∆°n h√†ng v√† ph√≠ v·∫≠n chuy·ªÉn
//			tongGiaTriDonHang = tongGiaTriDonHang.add(phiVanChuyen);
//			donHang.setTongGiaTriDonHang(tongGiaTriDonHang);
//			donHang.setPhiVanChuyen(phiVanChuyen);
//
//			// L∆∞u ƒë∆°n h√†ng l·∫ßn ƒë·∫ßu v√†o c∆° s·ªü d·ªØ li·ªáu
//			donHangService.save(donHang);
//
//			// Duy·ªát qua c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng v√† l∆∞u chi ti·∫øt ƒë∆°n h√†ng
//			for (ChiTietGioHang cartItem : cartItems) {
//				// T·∫°o ID t·ªïng h·ª£p cho chi ti·∫øt ƒë∆°n h√†ng
//				ChiTietDonHangId chiTietDonHangId = new ChiTietDonHangId(donHang.getMaDonHang(),
//						cartItem.getSanPham().getMaSanPham());
//
//				// T√≠nh gi√° t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t (bao g·ªìm khuy·∫øn m√£i n·∫øu c√≥)
//				BigDecimal giaTaiThoiDiemDat = cartItem.getSanPham().getDonGiaBan();
//				Optional<KhuyenMai> highestCurrentKhuyenMai = cartItem.getSanPham().getKhuyenMais().stream()
//						.filter(KhuyenMai::getTrangThai)
//						.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
//								&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
//						.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));
//
//				BigDecimal phanTramGiam = BigDecimal.ZERO;
//				if (highestCurrentKhuyenMai.isPresent()) {
//					phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
//					giaTaiThoiDiemDat = giaTaiThoiDiemDat
//							.subtract(giaTaiThoiDiemDat.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
//				}
//
//				// T·∫°o chi ti·∫øt ƒë∆°n h√†ng
//				ChiTietDonHang chiTietDonHang = new ChiTietDonHang(chiTietDonHangId, donHang, cartItem.getSanPham(),
//						cartItem.getSoLuong(), giaTaiThoiDiemDat, phanTramGiam);
//
//				// L∆∞u chi ti·∫øt ƒë∆°n h√†ng v√†o c∆° s·ªü d·ªØ li·ªáu
//				chiTietDonHangService.save(chiTietDonHang);
//
//				SanPham sanPham = cartItem.getSanPham();
//				// Tr√°nh NullPointerException
//				int soLuongNhap = Optional
//						.ofNullable(
//								chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPham.getMaSanPham()))
//						.orElse(0);
//				int soLuongBan = Optional
//						.ofNullable(chiTietDonHangService.getTotalQuantityBySanPhamId(sanPham.getMaSanPham()))
//						.orElse(0);
//				int soLuongTrenKe = Optional.ofNullable(sanPham.getSoLuong()).orElse(0);
//
//				// T·ªïng t·ªìn kho th·ª±c t·∫ø
//				int soLuongTonKho = soLuongNhap - soLuongBan - soLuongTrenKe;
//				System.out.println("üì¶ [Debug] Ki·ªÉm tra l·∫°i t·ªìn kho tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng");
//				System.out.println("üî¢ [Debug] Nh·∫≠p kho: " + soLuongNhap);
//				System.out.println("üì§ [Debug] ƒê√£ b√°n: " + soLuongBan);
//				System.out.println("üõí [Debug] Tr√™n k·ªá: " + soLuongTrenKe);
//				System.out.println("üì¶ [Debug] T·ªìn kho th·ª±c t·∫ø: " + soLuongTonKho);
//				System.out.println("üõí [Debug] T·∫†O ƒê∆†N H√ÄNG - Th·ªùi gian: " + LocalDateTime.now());
//				System.out.println("üì¶ [Debug] S·∫£n ph·∫©m: " + sanPham.getTenSanPham());
//				System.out.println("üî¢ [Debug] T·ªìn kho t·∫°i th·ªùi ƒëi·ªÉm t·∫°o ƒë∆°n h√†ng: " + soLuongTonKho);
//
//				// Debug ki·ªÉm tra l·∫°i gi√° tr·ªã
//				System.out.println("üì¶ [Debug] T√≠nh l·∫°i t·ªìn kho: S·∫£n ph·∫©m ID " + sanPham.getMaSanPham() + " - Nh·∫≠p: "
//						+ soLuongNhap + " - B√°n: " + soLuongBan + " - Tr√™n k·ªá: " + soLuongTrenKe
//						+ " - T·ªìn kho th·ª±c t·∫ø: " + soLuongTonKho);
//
//				// Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi tr·ª´
//				if (cartItem.getSoLuong() > soLuongTonKho) {
//					throw new IllegalStateException(
//							"S·∫£n ph·∫©m '" + sanPham.getTenSanPham() + "' kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho.");
//				}
//
//				// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√†o database
//				sanPhamService.updateSoLuongTonKho(sanPham.getMaSanPham(), soLuongTonKho);
//
//				System.out.println("‚úÖ [Debug] ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho: S·∫£n ph·∫©m  khi nh·∫•n ƒë·∫∑t h√†ng ƒë√≥ "
//						+ sanPham.getMaSanPham() + " - C√≤n l·∫°i: " + soLuongTonKho);
//
//				System.out.println("‚úÖ [Debug] ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho cho s·∫£n ph·∫©m " + sanPham.getMaSanPham()
//						+ " - S·ªë l∆∞·ª£ng m·ªõi trong kho: " + soLuongTonKho);
//			}
//
//			// X√≥a gi·ªè h√†ng sau khi t·∫°o ƒë∆°n h√†ng
//			gioHangService.clearCart(currentUser);
//
//			System.out.println(" ƒê∆°n h√†ng ƒë√£ t·∫°o! M√£ ƒë∆°n h√†ng: " + donHang.getMaDonHang());
//
//			// üîπ N·∫øu ch·ªçn COD, x·ª≠ l√Ω b√¨nh th∆∞·ªùng
//			if ("COD".equals(phuongThucThanhToan)) {
//				redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
//				System.out.println(" ƒê∆°n h√†ng COD ƒë√£ t·∫°o! M√£ ƒë∆°n h√†ng: " + donHang.getMaDonHang());
//				return "redirect:/customer/order";
//			}
//
//			// th√™m ch·ªó VND
//			// üîπ N·∫øu ch·ªçn VNPay, chuy·ªÉn h∆∞·ªõng sang VNPay
//			if ("VNPay".equals(phuongThucThanhToan)) {
//				System.out.println(" Chuyen huong sang VNPay voi: " + donHang.getMaDonHang() + "v√† "
//						+ donHang.getTongGiaTriDonHang());
//				String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort();
//				String vnpayUrl = vnpayService.createOrder(donHang.getTongGiaTriDonHang().intValue(),
//						donHang.getMaDonHang().toString(), baseUrl);
//				System.out.println(" VNPay URL: " + vnpayUrl);
//
//				return "redirect:" + vnpayUrl;
//			}
//
//			return "redirect:/customer/order";
//		} catch (Exception e) {
//			e.printStackTrace();
//			model.addAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng: " + e.getMessage());
//			return "redirect:/customer/cart";
//		}
//	}

	@PostMapping("/create")
	public String createOrder(Principal principal, @RequestParam("address") String address,
			@RequestParam("phone") String phone, @RequestParam("phuongThucThanhToan") String phuongThucThanhToan,
			HttpServletRequest request, RedirectAttributes redirectAttributes, Model model) {

		System.out.println("üîπ [Debug] B·∫ÆT ƒê·∫¶U X·ª¨ L√ù T·∫†O ƒê∆†N H√ÄNG");
		if (principal == null) {
			return "redirect:/customer/login";
		}

		try {
			String username = principal.getName();
			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(username);
			List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);
			LocalDate today = LocalDate.now();

			// Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
			if (cartItems.isEmpty()) {
				model.addAttribute("errorMessage", "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.");
				return "redirect:/customer/cart";
			}

			System.out.println("üîπ [Debug] B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng");

			// üîπ T·∫°o ƒë·ªëi t∆∞·ª£ng DonHang
			DonHang donHang = new DonHang();
			donHang.setNguoiDung(currentUser);
			donHang.setDiaChiGiaoHang(address);
			donHang.setSdtNhanHang(phone);
			donHang.setNgayDat(LocalDateTime.now());

			// Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n
			if ("COD".equals(phuongThucThanhToan)) {
				donHang.setTrangThaiDonHang("ƒêang x·ª≠ l√Ω");
			} else if ("VNPay".equals(phuongThucThanhToan)) {
				donHang.setTrangThaiDonHang("Ch·ªù thanh to√°n");
			} else {
				redirectAttributes.addFlashAttribute("errorMessage", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.");
				return "redirect:/customer/order";
			}

			BigDecimal tongGiaTriDonHang = BigDecimal.ZERO;

			// üîπ Duy·ªát qua gi·ªè h√†ng ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
			for (ChiTietGioHang cartItem : cartItems) {
				BigDecimal giaTaiThoiDiemDat = cartItem.getSanPham().getDonGiaBan();
				Optional<KhuyenMai> highestCurrentKhuyenMai = cartItem.getSanPham().getKhuyenMais().stream()
						.filter(KhuyenMai::getTrangThai)
						.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
								&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
						.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

				if (highestCurrentKhuyenMai.isPresent()) {
					BigDecimal phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
					giaTaiThoiDiemDat = giaTaiThoiDiemDat
							.subtract(giaTaiThoiDiemDat.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
				}

				BigDecimal thanhTien = giaTaiThoiDiemDat.multiply(BigDecimal.valueOf(cartItem.getSoLuong()));
				tongGiaTriDonHang = tongGiaTriDonHang.add(thanhTien);
			}

			// üîπ T√≠nh ph√≠ v·∫≠n chuy·ªÉn
			BigDecimal phiVanChuyen = shippingFeeConfigService.getShippingFeeForOrder(tongGiaTriDonHang);
			tongGiaTriDonHang = tongGiaTriDonHang.add(phiVanChuyen);
			donHang.setTongGiaTriDonHang(tongGiaTriDonHang);
			donHang.setPhiVanChuyen(phiVanChuyen);

			// üîπ L∆∞u ƒë∆°n h√†ng v√†o database
			donHangService.save(donHang);

			// üîπ Duy·ªát qua t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ t·∫°o chi ti·∫øt ƒë∆°n h√†ng
			for (ChiTietGioHang cartItem : cartItems) {
				SanPham sanPham = cartItem.getSanPham();
				Integer maSanPham = sanPham.getMaSanPham();

				int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(maSanPham);
				int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(maSanPham);
				int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(maSanPham);
				int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(maSanPham);
				int soLuongTraHang = donHangService.getSoLuongTraHang(maSanPham);

				Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(maSanPham);
				int soLuongTonKho = (tonKhoDaDuyet != null)
						? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)
						: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

				// üîπ Debug ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng
				System.out.println("üì¶ [Debug] Ki·ªÉm tra l·∫°i t·ªìn kho tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng");
				System.out.println("üî¢ [Debug] Nh·∫≠p kho: " + tongSoLuongNhap);
				System.out.println("üì§ [Debug] ƒê√£ b√°n: " + soLuongBan);
				System.out.println("üõí [Debug] Tr√™n k·ªá: " + soLuongTrenKe);
				System.out.println("üì¶ [Debug] ƒêi·ªÅu ch·ªânh ki·ªÉm k√™: " + deltaKiemKe);
				System.out.println("üîÑ [Debug] H√†ng tr·∫£ l·∫°i: " + soLuongTraHang);
				System.out.println("üì¶ [Debug] T·ªìn kho th·ª±c t·∫ø: " + soLuongTonKho);

				// üîπ Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi tr·ª´
				if (cartItem.getSoLuong() > soLuongTonKho) {
					throw new IllegalStateException(
							"S·∫£n ph·∫©m '" + sanPham.getTenSanPham() + "' kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho.");
				}

				// üîπ T·∫°o chi ti·∫øt ƒë∆°n h√†ng
				ChiTietDonHangId chiTietDonHangId = new ChiTietDonHangId(donHang.getMaDonHang(),
						cartItem.getSanPham().getMaSanPham());

				// T√≠nh gi√° t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t (bao g·ªìm khuy·∫øn m√£i n·∫øu c√≥)
				BigDecimal giaTaiThoiDiemDat = cartItem.getSanPham().getDonGiaBan();
				Optional<KhuyenMai> highestCurrentKhuyenMai = cartItem.getSanPham().getKhuyenMais().stream()
						.filter(KhuyenMai::getTrangThai)
						.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
								&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
						.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

				BigDecimal phanTramGiam = BigDecimal.ZERO;
				if (highestCurrentKhuyenMai.isPresent()) {
					phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
					giaTaiThoiDiemDat = giaTaiThoiDiemDat
							.subtract(giaTaiThoiDiemDat.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
				}

				ChiTietDonHang chiTietDonHang = new ChiTietDonHang(chiTietDonHangId, donHang, cartItem.getSanPham(),
						cartItem.getSoLuong(), giaTaiThoiDiemDat,
						highestCurrentKhuyenMai.map(KhuyenMai::getPhanTramGiamGia).orElse(BigDecimal.ZERO));

				// üîπ L∆∞u chi ti·∫øt ƒë∆°n h√†ng v√†o database
				chiTietDonHangService.save(chiTietDonHang);

				// üîπ Tr·ª´ s·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø
				soLuongTonKho -= cartItem.getSoLuong();

				// üîπ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√†o database
				// sanPhamService.updateSoLuongTonKho(sanPham.getMaSanPham(), soLuongTonKho);

				System.out.println("‚úÖ [Debug] ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho: S·∫£n ph·∫©m " + sanPham.getMaSanPham() + " - C√≤n l·∫°i: "
						+ soLuongTonKho);
			}

			// üîπ X√≥a gi·ªè h√†ng sau khi t·∫°o ƒë∆°n h√†ng
			gioHangService.clearCart(currentUser);

			System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ t·∫°o! M√£ ƒë∆°n h√†ng: " + donHang.getMaDonHang());
			// üîπ N·∫øu ch·ªçn COD, x·ª≠ l√Ω b√¨nh th∆∞·ªùng
			if ("COD".equals(phuongThucThanhToan)) {
				redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
				System.out.println(" ƒê∆°n h√†ng COD ƒë√£ t·∫°o! M√£ ƒë∆°n h√†ng: " + donHang.getMaDonHang());
				return "redirect:/customer/order";
			}

			// th√™m ch·ªó VND
			// üîπ N·∫øu ch·ªçn VNPay, chuy·ªÉn h∆∞·ªõng sang VNPay
			if ("VNPay".equals(phuongThucThanhToan)) {
				System.out.println(" Chuyen huong sang VNPay voi: " + donHang.getMaDonHang() + "v√† "
						+ donHang.getTongGiaTriDonHang());
				String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort();
				String vnpayUrl = vnpayService.createOrder(donHang.getTongGiaTriDonHang().intValue(),
						donHang.getMaDonHang().toString(), baseUrl);
				System.out.println(" VNPay URL: " + vnpayUrl);

				return "redirect:" + vnpayUrl;
			}

			return "redirect:/customer/order";
		} catch (Exception e) {
			e.printStackTrace();
			model.addAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng: " + e.getMessage());
			return "redirect:/customer/cart";
		}
	}

	// H·ªßy ƒë∆°n h√†ng
	@PostMapping("/cancel")
	public String cancelOrder(@RequestParam("maDonHang") Integer maDonHang, @RequestParam("lyDoHuy") String lyDoHuy,
			RedirectAttributes redirectAttributes) {
		DonHang donHang = donHangService.getDonHangById(maDonHang);

		if (donHang == null || !"ƒêang x·ª≠ l√Ω".equals(donHang.getTrangThaiDonHang())) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng n√†y.");
			return "redirect:/customer/order";
		}

		// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "ƒê√£ h·ªßy"
		donHang.setTrangThaiDonHang("ƒê√£ h·ªßy");
		donHang.setGhiChu(lyDoHuy);
		donHangService.updateDonHang(donHang);

		// C·ªông l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
		for (ChiTietDonHang chiTiet : donHang.getChiTietDonHangs()) {
//			SanPham sanPham = chiTiet.getSanPham();
//			int soLuongConLai = sanPham.getSoLuong() + chiTiet.getSoLuong();
//			sanPham.setSoLuong(soLuongConLai);
//			sanPhamService.update(sanPham);
			System.out.println("üì¶ [DEBUG] ƒê∆°n h·ªßy - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë√∫ng:");
			System.out.println("üõí S·∫£n ph·∫©m ID: " + chiTiet.getSanPham().getMaSanPham());
			System.out.println("üì¶ S·ªë l∆∞·ª£ng c·ªßa ƒë∆°n b·ªã h·ªßy: " + chiTiet.getSoLuong());
		}

		redirectAttributes.addFlashAttribute("successMessage", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.");
		return "redirect:/customer/order";
	}
	
	 @PostMapping("/confirm-delivery")
	    public String confirmDelivery(@RequestParam("maDonHang") Integer maDonHang, RedirectAttributes redirectAttributes) {
	        DonHang donHang = donHangService.getDonHangById(maDonHang);
	        if (donHang == null || !"ƒê√£ ho√†n th√†nh".equals(donHang.getTrangThaiDonHang())) {
	            redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng n√†y.");
	            return "redirect:/customer/order";
	        }

	        donHang.setDaKhachXacNhan(true);
	        donHang.setThoiGianXacNhanKhach(LocalDateTime.now());
	        donHangService.updateDonHang(donHang);

	        redirectAttributes.addFlashAttribute("successMessage", "C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng.");
	        return "redirect:/customer/order";
	    }

	    @PostMapping("/report-not-received")
	    public String reportNotReceived(@RequestParam("maDonHang") Integer maDonHang, RedirectAttributes redirectAttributes) {
	        DonHang donHang = donHangService.getDonHangById(maDonHang);
	        if (donHang == null || !"ƒê√£ ho√†n th√†nh".equals(donHang.getTrangThaiDonHang())) {
	            redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ b√°o l·ªói ƒë∆°n h√†ng n√†y.");
	            return "redirect:/customer/order";
	        }

	        donHang.setTrangThaiChoXacNhan("Kh√°ch b√°o ch∆∞a nh·∫≠n ƒë∆∞·ª£c h√†ng");
	        donHangService.updateDonHang(donHang);

	        redirectAttributes.addFlashAttribute("successMessage", "ƒê√£ ghi nh·∫≠n b√°o c√°o c·ªßa b·∫°n. Ch√∫ng t√¥i s·∫Ω ki·ªÉm tra l·∫°i.");
	        return "redirect:/customer/order";
	    }
	
	
	
	
	

}
