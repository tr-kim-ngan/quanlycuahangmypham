package com.kimngan.ComesticAdmin.controller.customer;

import java.math.BigDecimal;
import java.security.Principal;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kimngan.ComesticAdmin.entity.ChiTietGioHang;

import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.entity.ShippingFeeConfig;
import com.kimngan.ComesticAdmin.repository.SanPhamRepository;
import com.kimngan.ComesticAdmin.services.ChiTietDonHangService;
import com.kimngan.ComesticAdmin.services.ChiTietDonNhapHangService;
import com.kimngan.ComesticAdmin.services.DonHangService;
import com.kimngan.ComesticAdmin.services.GioHangService;
import com.kimngan.ComesticAdmin.services.KiemKeKhoService;
import com.kimngan.ComesticAdmin.services.NguoiDungService;
import com.kimngan.ComesticAdmin.services.SanPhamService;
import com.kimngan.ComesticAdmin.services.ShippingFeeConfigService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/customer/cart")
public class GioHangController {

	@Autowired
	private GioHangService gioHangService;

	@Autowired
	private SanPhamService sanPhamService;

	@Autowired
	private NguoiDungService nguoiDungService;

	@Autowired
	private ShippingFeeConfigService shippingFeeConfigService;

	@Autowired
	private ChiTietDonHangService chiTietDonHangService;
	@Autowired
	private ChiTietDonNhapHangService chiTietDonNhapHangService;

	@Autowired
	private KiemKeKhoService kiemKeKhoService;

	@Autowired
	private SanPhamRepository sanPhamRepository;
	@Autowired
	private DonHangService donHangService;

	@ModelAttribute
	public void addAttributes(Model model, Principal principal) {
		if (principal != null) {
			// L·∫•y t√™n ƒëƒÉng nh·∫≠p t·ª´ Principal
			String username = principal.getName();

			// T√¨m th√¥ng tin ng∆∞·ªùi d√πng
			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(username);

			// Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√† timestamp v√†o Model
			model.addAttribute("currentUser", currentUser);
			model.addAttribute("timestamp", System.currentTimeMillis()); // Timestamp lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
		}
	}

	@GetMapping
	public String viewCart(Model model, Principal principal,
			@RequestParam(value = "selectedProducts", required = false) List<Integer> selectedProducts) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		// N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn, kh·ªüi t·∫°o danh s√°ch tr·ªëng
		if (selectedProducts == null) {
			selectedProducts = new ArrayList<>();
		}

		// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
		NguoiDung nguoiDung = getCurrentUser(principal);


//		List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(nguoiDung).stream()
//				.filter(item -> tinhSoLuongTonKho(item.getSanPham().getMaSanPham()) > 0).collect(Collectors.toList());
//		
		List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(nguoiDung);

		
		// T√≠nh t·ªïng gi√° tr·ªã v√† ph·∫ßn trƒÉm gi·∫£m gi√°
		BigDecimal totalPrice = BigDecimal.ZERO;
		Map<Integer, KhuyenMai> sanPhamKhuyenMaiMap = new HashMap<>();
		Map<Integer, BigDecimal> sanPhamGiaSauGiamMap = new HashMap<>();
		Map<Integer, BigDecimal> phanTramGiamMap = new HashMap<>(); // Map ƒë·ªÉ l∆∞u % gi·∫£m gi√°
		Map<Integer, Integer> sanPhamSoLuongTonKhoMap = new HashMap<>();

		LocalDate today = LocalDate.now();
		for (ChiTietGioHang item : cartItems) {
			SanPham sanPham = item.getSanPham();
			BigDecimal giaSauGiam = sanPham.getDonGiaBan();

			Optional<KhuyenMai> highestCurrentKhuyenMai = sanPham.getKhuyenMais().stream()
					.filter(km -> km.getTrangThai())
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			if (highestCurrentKhuyenMai.isPresent()) {
				BigDecimal phanTramGiam = highestCurrentKhuyenMai.get().getPhanTramGiamGia();
				phanTramGiamMap.put(sanPham.getMaSanPham(), phanTramGiam); // L∆∞u % gi·∫£m gi√°
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
				sanPhamKhuyenMaiMap.put(sanPham.getMaSanPham(), highestCurrentKhuyenMai.get());
			} else {
				phanTramGiamMap.put(sanPham.getMaSanPham(), BigDecimal.ZERO); // Kh√¥ng c√≥ gi·∫£m gi√°
				sanPhamKhuyenMaiMap.put(sanPham.getMaSanPham(), null);
			}

			// int soLuongTonKho =
			// sanPhamService.getSoLuongTonKho(item.getSanPham().getMaSanPham());
			// int soLuongTonKho = tinhSoLuongTonKho(item.getSanPham().getMaSanPham());

			// sanPhamSoLuongTonKhoMap.put(item.getSanPham().getMaSanPham(), soLuongTonKho);
			Integer sanPhamId = sanPham.getMaSanPham();
			int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPhamId);
			int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPhamId);
			int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(sanPhamId);
			int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(sanPhamId);
			int soLuongTraHang = donHangService.getSoLuongTraHang(sanPhamId);

			Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(sanPhamId);
			int soLuongTonKho = (tonKhoDaDuyet != null)
					? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)
					: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

			sanPhamSoLuongTonKhoMap.put(sanPhamId, soLuongTonKho);
			sanPhamGiaSauGiamMap.put(sanPham.getMaSanPham(), giaSauGiam);
			totalPrice = totalPrice.add(giaSauGiam.multiply(BigDecimal.valueOf(item.getSoLuong())));
		}
		// Ki·ªÉm tra xem s·ªë l∆∞·ª£ng t·ªìn kho c√≥ ƒë√∫ng kh√¥ng tr∆∞·ªõc khi ƒë∆∞a v√†o model
		System.out.println("üì¶ [DEBUG] S·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø:");
		for (Map.Entry<Integer, Integer> entry : sanPhamSoLuongTonKhoMap.entrySet()) {
		    System.out.println("üõí S·∫£n ph·∫©m ID: " + entry.getKey() + " | T·ªìn kho: " + entry.getValue());
		}

		// ƒê∆∞a d·ªØ li·ªáu v√†o model ƒë·ªÉ hi·ªÉn th·ªã trong cart.html
		model.addAttribute("cartItems", cartItems);
		model.addAttribute("totalPrice", totalPrice);
		model.addAttribute("selectedProducts", selectedProducts);
		model.addAttribute("sanPhamKhuyenMaiMap", sanPhamKhuyenMaiMap);
		model.addAttribute("sanPhamGiaSauGiamMap", sanPhamGiaSauGiamMap);
		model.addAttribute("phanTramGiamMap", phanTramGiamMap); // Th√™m % gi·∫£m gi√° v√†o model
		model.addAttribute("sanPhamSoLuongTonKhoMap", sanPhamSoLuongTonKhoMap);

		return "customer/cart";
	}

	@PostMapping("/add")
	public String addToCart(@RequestParam("productId") Integer productId,
			@RequestParam(value = "quantity", required = false, defaultValue = "1") Integer quantity,
			Principal principal, RedirectAttributes redirectAttributes, HttpServletRequest request) {

		// Ki·ªÉm tra n·∫øu quantity null ho·∫∑c nh·ªè h∆°n 1 th√¨ ƒë·∫∑t l·∫°i th√†nh 1
		if (quantity == null || quantity < 1) {
			quantity = 1;
		}

		// Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p hay ch∆∞a
		if (principal == null) {
			redirectAttributes.addFlashAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.");
			return "redirect:/login"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
		}

		try {
			System.out.println("ProductId nh·∫≠n ƒë∆∞·ª£c: " + productId);
			System.out.println("S·ªë l∆∞·ª£ng nh·∫≠n ƒë∆∞·ª£c: " + quantity);

			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
			Optional<SanPham> optionalSanPham = sanPhamService.findByIdOptional(productId);

			if (!optionalSanPham.isPresent()) {
				redirectAttributes.addFlashAttribute("error", "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
				return "redirect:" + request.getHeader("Referer");
			}

			SanPham sanPham = optionalSanPham.get();
			Integer sanPhamId = sanPham.getMaSanPham();
			// L·∫•y s·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø
			// int soLuongTonKho = sanPhamService.getSoLuongTonKho(sanPham.getMaSanPham());
			// int soLuongTonKho = tinhSoLuongTonKho(sanPham.getMaSanPham());
			int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPhamId);
			int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPhamId);
			int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(sanPhamId);
			int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(sanPhamId);
			int soLuongTraHang = donHangService.getSoLuongTraHang(sanPhamId);

			Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(sanPhamId);
			int soLuongTonKho = (tonKhoDaDuyet != null)
					? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)
					: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

			System.out.println("üì¶ DEBUG - S·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø: " + soLuongTonKho);

			// Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng c√≥ v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng
			if (quantity > soLuongTonKho) {
				System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng! S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.");
				quantity = soLuongTonKho; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng theo s·ªë l∆∞·ª£ng t·ªìn kho
			}

			gioHangService.addToCart(currentUser, sanPham, quantity);

			redirectAttributes.addFlashAttribute("success", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!");
			return "redirect:" + request.getHeader("Referer");

		} catch (Exception e) {
			e.printStackTrace();
			redirectAttributes.addFlashAttribute("error", "L·ªói trong qu√° tr√¨nh th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.");
			return "redirect:" + request.getHeader("Referer");
		}
	}

	@PostMapping("/remove")
	public String removeFromCart(@RequestParam("sanPhamId") Integer sanPhamId, Principal principal,
			RedirectAttributes redirectAttributes) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		SanPham sanPham = sanPhamService.findById(sanPhamId);

		gioHangService.removeFromCart(currentUser, sanPham);
		redirectAttributes.addFlashAttribute("successMessage", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!");

		return "redirect:/customer/cart";
	}

	@GetMapping("/count")
	@ResponseBody
	public Integer getCartItemCount(Principal principal) {
		if (principal != null) {
			NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
			List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);
			return cartItems.size();
		}
		return 0;
	}

	@PostMapping("/select-all")
	public String selectAllItems(Principal principal, RedirectAttributes redirectAttributes) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);

		List<Integer> selectedProductIds = cartItems.stream().map(item -> item.getSanPham().getMaSanPham())
				.collect(Collectors.toList());

		redirectAttributes.addFlashAttribute("selectedProducts", selectedProductIds);
		return "redirect:/customer/cart";
	}

	@PostMapping("/checkout")
	public String checkout(Principal principal, Model model,

			RedirectAttributes redirectAttributes) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		if (currentUser == null) {
			redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
			return "redirect:/customer/cart";
		}

		// L·∫•y gi·ªè h√†ng
		List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);
		System.out.println("üõí [Debug] S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè: " + cartItems.size());

		if (cartItems.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.");
			return "redirect:/customer/cart";
		} else {
			System.out.println("Cart items found: " + cartItems.size());
		}

		// Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≤n l·∫°i v√† t√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
		BigDecimal totalPrice = BigDecimal.ZERO;
		Map<Integer, BigDecimal> sanPhamGiaSauGiamMap = new HashMap<>();
		Map<Integer, BigDecimal> phanTramGiamMap = new HashMap<>(); // Map ƒë·ªÉ l∆∞u % gi·∫£m gi√°

		LocalDate today = LocalDate.now();
		for (ChiTietGioHang item : cartItems) {
			SanPham sanPham = item.getSanPham();
			Integer maSanPham = sanPham.getMaSanPham();

			// ‚úÖ T√≠nh s·ªë l∆∞·ª£ng t·ªìn kho tr·ª±c ti·∫øp
			int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(maSanPham);
			int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(maSanPham);
			int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(maSanPham);
			int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(maSanPham);
			int soLuongTraHang = donHangService.getSoLuongTraHang(maSanPham);

//	        int soLuongTonKho = tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe;
			Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(maSanPham);

			int soLuongTonKho = (tonKhoDaDuyet != null)
					? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)

					: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

			// int soLuongTonKho = sanPhamService.getSoLuongTonKho(sanPham.getMaSanPham());

			// Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
			System.out.println("üì¶ [Debug] Ki·ªÉm tra s·∫£n ph·∫©m: " + sanPham.getTenSanPham());
			System.out.println("üî¢ [Debug] S·ªë l∆∞·ª£ng t·ªìn kho: " + soLuongTonKho);
			System.out.println("üõí [Debug] S·ªë l∆∞·ª£ng c·∫ßn ƒë·∫∑t: " + item.getSoLuong());
			System.out.println("üõí [Debug] KH√ÅCH H√ÄNG CHECKOUT - Th·ªùi gian: " + LocalDateTime.now());
			System.out.println("üì¶ [Debug] S·∫£n ph·∫©m: " + sanPham.getTenSanPham());
			System.out.println("üî¢ [Debug] T·ªìn kho t·∫°i th·ªùi ƒëi·ªÉm checkout: " + soLuongTonKho);

			// Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
			if (item.getSoLuong() > soLuongTonKho) {
				redirectAttributes.addFlashAttribute("errorMessage", "S·∫£n ph·∫©m '" + sanPham.getTenSanPham()
						+ "' kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho. Vui l√≤ng ƒëi·ªÅu ch·ªânh l·∫°i s·ªë l∆∞·ª£ng trong gi·ªè h√†ng.");
				return "redirect:/customer/cart";
			}

			BigDecimal giaSauGiam = sanPham.getDonGiaBan();

			// Ki·ªÉm tra khuy·∫øn m√£i
			Optional<KhuyenMai> khuyenMaiOptional = sanPham.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
					.filter(km -> !km.getNgayBatDau().toLocalDate().isAfter(today)
							&& !km.getNgayKetThuc().toLocalDate().isBefore(today))
					.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

			if (khuyenMaiOptional.isPresent()) {
				BigDecimal phanTramGiam = khuyenMaiOptional.get().getPhanTramGiamGia();
				phanTramGiamMap.put(sanPham.getMaSanPham(), phanTramGiam); // L∆∞u % gi·∫£m gi√°
				giaSauGiam = giaSauGiam.subtract(giaSauGiam.multiply(phanTramGiam).divide(BigDecimal.valueOf(100)));
			} else {
				phanTramGiamMap.put(sanPham.getMaSanPham(), BigDecimal.ZERO); // Kh√¥ng c√≥ gi·∫£m gi√°
			}

			sanPhamGiaSauGiamMap.put(sanPham.getMaSanPham(), giaSauGiam);
			totalPrice = totalPrice.add(giaSauGiam.multiply(BigDecimal.valueOf(item.getSoLuong())));
		}

		System.out.println("üí∞ [Debug] T·ªïng ti·ªÅn s·∫£n ph·∫©m: " + totalPrice);

		List<ShippingFeeConfig> shippingConfigs = shippingFeeConfigService.getAllShippingConfigs();
		BigDecimal shippingFee = BigDecimal.ZERO;
		for (ShippingFeeConfig config : shippingConfigs) {
			if (config.getMinOrderValue().compareTo(totalPrice) <= 0
					&& (config.getMaxOrderValue() == null || config.getMaxOrderValue().compareTo(totalPrice) >= 0)) {
				shippingFee = config.getShippingFee();
				break;
			}
		}

		System.out.println("üöö [Debug] Ph√≠ v·∫≠n chuy·ªÉn √°p d·ª•ng t·ª´ CSDL: " + shippingFee);
		// T√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng sau khi c·ªông ph√≠ v·∫≠n chuy·ªÉn
		BigDecimal finalTotal = totalPrice.add(shippingFee);
		System.out.println("üõí [Debug] T·ªïng ti·ªÅn ƒë∆°n h√†ng (bao g·ªìm ph√≠ v·∫≠n chuy·ªÉn): " + finalTotal);

		// ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn tr∆∞·ªõc khi hi·ªÉn th·ªã
		DecimalFormat decimalFormat = new DecimalFormat("#,###.##");

		model.addAttribute("formattedTotalPrice", decimalFormat.format(totalPrice));
		model.addAttribute("formattedShippingFee", decimalFormat.format(shippingFee));
		model.addAttribute("formattedFinalTotal", decimalFormat.format(finalTotal));
		// Truy·ªÅn d·ªØ li·ªáu v√†o model
		model.addAttribute("currentUser", currentUser); // Th√™m th√¥ng tin ng∆∞·ªùi d√πng
		model.addAttribute("cartItems", cartItems);
		model.addAttribute("totalPrice", totalPrice);
		model.addAttribute("sanPhamGiaSauGiamMap", sanPhamGiaSauGiamMap);
		model.addAttribute("phanTramGiamMap", phanTramGiamMap); // Th√™m map ph·∫ßn trƒÉm gi·∫£m gi√° v√†o model
		model.addAttribute("finalTotal", finalTotal);
		model.addAttribute("shippingFee", shippingFee);

		System.out.println("‚úÖ [Debug] Ho√†n t·∫•t checkout. Chuy·ªÉn ƒë·∫øn confirmOrder.html");

		return "customer/confirmOrder"; // Chuy·ªÉn ƒë·∫øn trang confirmOrder
	}

	@PostMapping("/update-quantity")
	public String updateCartItemQuantity(@RequestParam("sanPhamId") Integer sanPhamId,
			@RequestParam("quantity") Integer newQuantity, Principal principal, RedirectAttributes redirectAttributes) {
		if (principal == null) {
			return "redirect:/customer/login";
		}

		NguoiDung currentUser = nguoiDungService.findByTenNguoiDung(principal.getName());
		SanPham sanPham = sanPhamService.findById(sanPhamId);
		int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPhamId);
		int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPhamId);
		int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(sanPhamId);
		int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(sanPhamId);
		int soLuongTraHang = donHangService.getSoLuongTraHang(sanPhamId);

		Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(sanPhamId);

		int soLuongTonKho = (tonKhoDaDuyet != null)
				? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)
				: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

		// Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng m·ªõi v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho
		if (newQuantity > soLuongTonKho) {
			redirectAttributes.addFlashAttribute("errorMessage",
					"S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho (" + soLuongTonKho + ").");
			return "redirect:/customer/cart";
		}
		// G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
		gioHangService.updateCartItemQuantity(currentUser, sanPham, newQuantity);

		redirectAttributes.addFlashAttribute("successMessage", "S·ªë l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
		return "redirect:/customer/cart";
	}

	@PostMapping("/calculate-total")
	@ResponseBody
	public BigDecimal calculateTotal(@RequestBody List<Integer> selectedProducts) {
		if (selectedProducts == null || selectedProducts.isEmpty()) {
			return BigDecimal.ZERO;
		}

		BigDecimal total = BigDecimal.ZERO;
		for (Integer productId : selectedProducts) {
			Optional<SanPham> sanPhamOptional = sanPhamService.findByIdOptional(productId);
			if (sanPhamOptional.isPresent()) {
				SanPham sanPham = sanPhamOptional.get();
				BigDecimal giaSauGiam = sanPham.getDonGiaBan();

				Optional<KhuyenMai> khuyenMaiOptional = sanPham.getKhuyenMais().stream().filter(KhuyenMai::getTrangThai)
						.max(Comparator.comparing(KhuyenMai::getPhanTramGiamGia));

				if (khuyenMaiOptional.isPresent()) {
					BigDecimal discount = giaSauGiam.multiply(khuyenMaiOptional.get().getPhanTramGiamGia())
							.divide(BigDecimal.valueOf(100));
					giaSauGiam = giaSauGiam.subtract(discount);
				}
				total = total.add(giaSauGiam.multiply(BigDecimal.valueOf(1))); // Thay 1 b·∫±ng s·ªë l∆∞·ª£ng th·ª±c t·∫ø
			}
		}

		return total;
	}

	@GetMapping("/total-items")
	@ResponseBody
	public Integer getTotalItemsInCart(Principal principal) {
		if (principal == null) {
			return 0; // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, tr·∫£ v·ªÅ 0
		}

		NguoiDung currentUser = getCurrentUser(principal);
		List<ChiTietGioHang> cartItems = gioHangService.viewCartItems(currentUser);
		// T√≠nh t·ªïng s·ªë l∆∞·ª£ng t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
		// ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng (kh√¥ng t√≠nh t·ªïng s·ªë l∆∞·ª£ng)
		int totalItems = cartItems.size();

		// Debug ki·ªÉm tra
		System.out.println("üõí S·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng: " + totalItems);

		return totalItems; // ‚úÖ Tr·∫£ v·ªÅ t·ªïng s·ªë l∆∞·ª£ng

	}

	@ModelAttribute("cartItems")
	public List<ChiTietGioHang> getCartItems(Principal principal) {
		if (principal != null) {
			NguoiDung currentUser = getCurrentUser(principal);
			List<ChiTietGioHang> items = gioHangService.viewCartItems(currentUser);
			System.out.println("Cart items: " + items);
			return items;
		}
		return new ArrayList<>();
	}

	private NguoiDung getCurrentUser(Principal principal) {
		return nguoiDungService.findByTenNguoiDung(principal.getName());
	}

	private int tinhSoLuongTonKho(Integer maSanPham) {
		int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(maSanPham);
		int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(maSanPham);
		int soLuongTrenKe = sanPhamRepository.getSoLuongTrenKe(maSanPham);
		int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(maSanPham);
		int soLuongTraHang = donHangService.getSoLuongTraHang(maSanPham);

		Integer tonKhoDaDuyet = kiemKeKhoService.getLastApprovedStock(maSanPham);

		int soLuongTonKho = (tonKhoDaDuyet != null)
				? (tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe + soLuongTraHang)

				: (tongSoLuongNhap - soLuongBan - soLuongTrenKe + soLuongTraHang);

		return soLuongTonKho;
		// return tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe;
	}

}
