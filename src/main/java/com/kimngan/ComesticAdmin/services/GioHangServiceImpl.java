package com.kimngan.ComesticAdmin.services;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.kimngan.ComesticAdmin.entity.ChiTietDonHang;
import com.kimngan.ComesticAdmin.entity.ChiTietGioHang;
import com.kimngan.ComesticAdmin.entity.ChiTietGioHangId;
import com.kimngan.ComesticAdmin.entity.DonHang;
import com.kimngan.ComesticAdmin.entity.GioHang;
import com.kimngan.ComesticAdmin.entity.KhuyenMai;
import com.kimngan.ComesticAdmin.entity.NguoiDung;
import com.kimngan.ComesticAdmin.entity.SanPham;
import com.kimngan.ComesticAdmin.repository.ChiTietGioHangRepository;
import com.kimngan.ComesticAdmin.repository.GioHangRepository;

@Service
public class GioHangServiceImpl implements GioHangService {

	@Autowired
	private GioHangRepository gioHangRepository;
	@Autowired
	private ChiTietGioHangRepository chiTietGioHangRepository;

	@Autowired
	private NguoiDungService nguoiDungService;
	@Autowired
	private ChiTietGioHangService chiTietGioHangService;

	@Autowired
	private SanPhamService sanPhamService;
	
	@Autowired
	private ChiTietDonHangService chiTietDonHangService;
	@Autowired
	private KiemKeKhoService kiemKeKhoService;
	
	@Autowired
	private ChiTietDonNhapHangService chiTietDonNhapHangService;

	@Override
	public GioHang getOrCreateGioHang(NguoiDung nguoiDung) {
		// TODO Auto-generated method stub
		// T√¨m gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng, n·∫øu ch∆∞a c√≥ s·∫Ω t·∫°o m·ªõi
		return gioHangRepository.findByNguoiDung(nguoiDung).orElseGet(() -> {
			GioHang newGioHang = new GioHang();
			newGioHang.setNguoiDung(nguoiDung);
			newGioHang.setNgayTao(LocalDate.now());
			return gioHangRepository.save(newGioHang);
		});
	}

	@Override
	public void addToCart(NguoiDung nguoiDung, SanPham sanPham, Integer quantity) {
		GioHang gioHang = getOrCreateGioHang(nguoiDung);
		// L·∫•y s·ªë l∆∞·ª£ng t·ªìn kho ch√≠nh x√°c t·ª´ service
		
		 // L·∫•y d·ªØ li·ªáu ƒë·ªÉ t√≠nh s·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø
	    int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPham.getMaSanPham());
	    int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPham.getMaSanPham());
	    int soLuongTrenKe = sanPhamService.getSoLuongTrenKe(sanPham.getMaSanPham());
	    int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(sanPham.getMaSanPham());

	    // T√≠nh s·ªë l∆∞·ª£ng t·ªìn kho ch√≠nh x√°c
	    int soLuongTonKho = tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe;

	//	int soLuongTonKho = sanPhamService.getSoLuongTonKho(sanPham.getMaSanPham());
		System.out.println("üì¶ DEBUG - S·ªë l∆∞·ª£ng t·ªìn kho: " + soLuongTonKho);

		// Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng c√≥ v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng
		if (quantity > soLuongTonKho) {
		    System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng! S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.");
		    quantity = soLuongTonKho; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng theo s·ªë l∆∞·ª£ng t·ªìn kho
		}

		
		chiTietGioHangService.addOrUpdateChiTietGioHang(gioHang, sanPham, quantity);
	}

	@Override
	public void removeFromCart(NguoiDung nguoiDung, SanPham sanPham) {
		GioHang gioHang = getOrCreateGioHang(nguoiDung);
		chiTietGioHangRepository.findByGioHangAndSanPham(gioHang, sanPham).ifPresent(chiTietGioHangRepository::delete);

	}

	@Override
	public void clearCartAfterCheckout(NguoiDung nguoiDung) {
		GioHang gioHang = getOrCreateGioHang(nguoiDung);
		chiTietGioHangRepository.deleteByGioHang(gioHang);

	}

	@Override
	public List<ChiTietGioHang> viewCartItems(NguoiDung nguoiDung) {
		GioHang gioHang = getOrCreateGioHang(nguoiDung);
		return chiTietGioHangRepository.findByGioHang(gioHang);
	}

	@Override
	public void updateCartItemQuantity(NguoiDung nguoiDung, SanPham sanPham, Integer newQuantity) {
		// L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
		GioHang gioHang = getOrCreateGioHang(nguoiDung);

		// T√¨m chi ti·∫øt gi·ªè h√†ng cho s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t
		Optional<ChiTietGioHang> optionalChiTietGioHang = chiTietGioHangRepository.findByGioHangAndSanPham(gioHang,
				sanPham);

		if (optionalChiTietGioHang.isPresent()) {
			ChiTietGioHang chiTietGioHang = optionalChiTietGioHang.get();

	        // L·∫•y s·ªë l∆∞·ª£ng t·ªìn kho theo c√¥ng th·ª©c m·ªõi (kh√¥ng d√πng c·ªôt soLuongTonKho)
	        int tongSoLuongNhap = chiTietDonNhapHangService.getTotalImportedQuantityBySanPhamId(sanPham.getMaSanPham());
	        int soLuongBan = chiTietDonHangService.getTotalQuantityBySanPhamId(sanPham.getMaSanPham());
	        int soLuongTrenKe = sanPhamService.getSoLuongTrenKe(sanPham.getMaSanPham());
	        int deltaKiemKe = kiemKeKhoService.getDeltaKiemKe(sanPham.getMaSanPham());

	        int soLuongTonKho = tongSoLuongNhap - soLuongBan - soLuongTrenKe + deltaKiemKe;
			//int soLuongTonKho = sanPhamService.getSoLuongTonKho(sanPham.getMaSanPham());
			System.out.println("üîç DEBUG - S·∫£n ph·∫©m ID: " + sanPham.getMaSanPham());
			System.out.println("üì¶ S·ªë l∆∞·ª£ng t·ªìn kho th·ª±c t·∫ø: " + soLuongTonKho);
			System.out.println("üõí S·ªë l∆∞·ª£ng c·∫ßn c·∫≠p nh·∫≠t: " + newQuantity);
			// N·∫øu s·ªë l∆∞·ª£ng c·∫≠p nh·∫≠t v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho, ngƒÉn ch·∫∑n
	        if (newQuantity > soLuongTonKho) {
	            throw new RuntimeException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho!");
	        }

	        
			// Thay ƒë·ªïi s·ªë l∆∞·ª£ng th√†nh gi√° tr·ªã m·ªõi, kh√¥ng c·ªông th√™m
			chiTietGioHang.setSoLuong(newQuantity);
			System.out.println("C·∫≠p nh·∫≠t s·∫£n ph·∫©m c·ªßa updateCartItemQuantity: " + sanPham.getMaSanPham()
					+ " c·ªßa updateCartItemQuantity th√†nh s·ªë l∆∞·ª£ng m·ªõi: " + newQuantity);

			// L∆∞u thay ƒë·ªïi v√†o database
			chiTietGioHangRepository.save(chiTietGioHang);
		} else {
			throw new RuntimeException("S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng c·ªßa b·∫°n.");
		}
	}

	@Override
	public GioHang getCartByUser(NguoiDung nguoiDung) {
		// TODO Auto-generated method stub
		return gioHangRepository.findByNguoiDung(nguoiDung)
				.orElseThrow(() -> new RuntimeException("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i!"));
	}

	@Override
	public void clearCart(NguoiDung nguoiDung) {
		GioHang gioHang = nguoiDung.getGioHang();
		if (gioHang != null) {
			List<ChiTietGioHang> cartItems = chiTietGioHangRepository.findByGioHang(gioHang);
			if (!cartItems.isEmpty()) {
				chiTietGioHangRepository.deleteAll(cartItems);
			}
		}

	}

	@Override
	public List<ChiTietGioHang> getSelectedItems(NguoiDung nguoiDung, List<Integer> productIds) {
		// TODO Auto-generated method stub
		GioHang gioHang = getOrCreateGioHang(nguoiDung);
		List<ChiTietGioHang> allItems = chiTietGioHangRepository.findByGioHang(gioHang);

		// L·ªçc c√°c s·∫£n ph·∫©m theo danh s√°ch productIds ƒë∆∞·ª£c ch·ªçn
		return allItems.stream().filter(item -> productIds.contains(item.getSanPham().getMaSanPham()))
				.collect(Collectors.toList());
	}

}
